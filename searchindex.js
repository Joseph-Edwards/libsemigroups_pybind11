Search.setIndex({"docnames": ["api/PPerm", "api/Perm", "api/Transf", "api/bipart", "api/bmat8", "api/cong", "api/digraph", "api/digraph-helper", "api/forest", "api/fpsemi", "api/fpsemi-examples", "api/kambites", "api/knuth-bendix", "api/matrix", "api/number_of_words", "api/pbr", "api/silo", "api/sislo", "api/stephen", "api/stephen-helpers", "api/toddcoxeter", "api/wilo", "api/wislo", "authors", "biblio", "changelog", "congruences", "digraph", "elements", "fpsemigroups", "froidure-pin/accessors", "froidure-pin/attributes", "froidure-pin/cayley-graphs", "froidure-pin/factorisation", "froidure-pin/generators", "froidure-pin/idempotents", "froidure-pin/index", "froidure-pin/init", "froidure-pin/membership", "froidure-pin/prefix", "froidure-pin/runner", "froidure-pin/settings", "index", "install", "konieczny", "konieczny/attributes", "konieczny/dclass/index", "konieczny/dclass/methods", "konieczny/generators", "konieczny/greens", "konieczny/idempotents", "konieczny/index", "konieczny/init", "konieczny/membership", "konieczny/runner", "matrix", "misc", "presentations/index", "presentations/present", "presentations/present-helpers", "report", "semigroups", "stephen", "words"], "filenames": ["api/PPerm.rst", "api/Perm.rst", "api/Transf.rst", "api/bipart.rst", "api/bmat8.rst", "api/cong.rst", "api/digraph.rst", "api/digraph-helper.rst", "api/forest.rst", "api/fpsemi.rst", "api/fpsemi-examples.rst", "api/kambites.rst", "api/knuth-bendix.rst", "api/matrix.rst", "api/number_of_words.rst", "api/pbr.rst", "api/silo.rst", "api/sislo.rst", "api/stephen.rst", "api/stephen-helpers.rst", "api/toddcoxeter.rst", "api/wilo.rst", "api/wislo.rst", "authors.rst", "biblio.rst", "changelog.rst", "congruences.rst", "digraph.rst", "elements.rst", "fpsemigroups.rst", "froidure-pin/accessors.rst", "froidure-pin/attributes.rst", "froidure-pin/cayley-graphs.rst", "froidure-pin/factorisation.rst", "froidure-pin/generators.rst", "froidure-pin/idempotents.rst", "froidure-pin/index.rst", "froidure-pin/init.rst", "froidure-pin/membership.rst", "froidure-pin/prefix.rst", "froidure-pin/runner.rst", "froidure-pin/settings.rst", "index.rst", "install.rst", "konieczny.rst", "konieczny/attributes.rst", "konieczny/dclass/index.rst", "konieczny/dclass/methods.rst", "konieczny/generators.rst", "konieczny/greens.rst", "konieczny/idempotents.rst", "konieczny/index.rst", "konieczny/init.rst", "konieczny/membership.rst", "konieczny/runner.rst", "matrix.rst", "misc.rst", "presentations/index.rst", "presentations/present.rst", "presentations/present-helpers.rst", "report.rst", "semigroups.rst", "stephen.rst", "words.rst"], "titles": ["Partial perms", "Permutations", "Transformations", "Bipartition", "BMat8", "Congruence", "ActionDigraph", "Helper functions for ActionDigraph", "Forest", "FpSemigroup", "Examples", "Kambites", "Knuth-Bendix", "Matrix", "Number of words", "PBR", "Strings in lexicographic order (silo)", "Strings in short-lex order (sislo)", "Stephen", "Stephen helpers", "Todd-Coxeter", "Words in lexicographic order (wilo)", "Words in short-lex order (wislo)", "Authors", "Bibliography", "Changelog", "Congruences", "Digraphs", "Elements", "Finitely presented semigroups", "Accessors", "Attributes", "Cayley graphs", "Factorisation, products, and relations", "Generators", "Idempotents", "FroidurePin", "Constructors", "Membership + comparison", "Prefixes and suffixes", "Running and reporting", "Settings", "libsemigroups_pybind11 - Version 0.8.0", "Installation", "Konieczny", "Attributes", "Konieczny.DClass", "Methods", "Generators", "Green's relations", "Idempotents", "Konieczny", "Constructors", "Membership", "Running and reporting", "Matrix", "Miscellaneous", "Presentations", "Presentation", "Presentation helpers", "ReportGuard", "Semigroups", "Stephen's procedure for finitely presented semigroups", "Words"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63], "page": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 62], "contain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 19, 20, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 62, 63], "document": [0, 1, 2, 3, 4, 6, 7, 8, 10, 13, 15, 19, 20, 36, 44, 51, 58, 59, 63], "function": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 27, 28, 33, 36, 37, 40, 42, 45, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 62], "libsemigroups_pybind11": [0, 1, 2, 3, 4, 5, 7, 11, 12, 13, 15, 18, 20, 25, 26, 27, 29, 36, 43, 44, 51, 55, 56, 57, 58, 59, 60, 61, 62], "up": [0, 1, 2, 4, 25], "4294967296": [0, 1, 2], "point": [0, 1, 2, 3, 5, 6, 7, 8, 19, 20, 30, 33, 35, 36, 48, 49, 51], "ar": [0, 1, 2, 4, 5, 10, 13, 15, 18, 19, 20, 25, 26, 27, 29, 36, 37, 40, 42, 43, 44, 51, 52, 55, 58, 59, 61], "avail": [0, 1, 2, 12, 25, 27, 42, 58], "us": [0, 1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 25, 26, 29, 33, 36, 40, 41, 43, 44, 54, 58, 59, 60], "pperm": 0, "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 25, 26, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 44, 48, 49, 51, 52, 54, 55, 58, 59, 60], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 53, 54, 58, 59], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 25, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 49, 50, 51, 53, 58, 59], "instanc": [0, 1, 2, 5, 9, 11, 12, 13, 18, 19, 20, 34, 36, 37, 41, 46, 51, 52, 58, 59], "one": [0, 1, 2, 4, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 43, 59], "number": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 25, 30, 33, 34, 35, 36, 40, 41, 46, 47, 48, 49, 50, 51, 59, 63], "intern": [0, 1, 2, 4, 13], "class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 18, 19, 20, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61], "These": [0, 1, 2, 13, 25], "type": [0, 1, 2, 5, 6, 7, 10, 11, 13, 18, 19, 20, 25, 31, 58, 59, 60], "optimis": [0, 1, 2, 4, 13, 44], "imag": [0, 1, 2, 3, 15], "specifi": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 15, 18, 20, 30, 34, 36, 37, 38, 39, 40, 48, 51, 52, 54, 58], "fewer": [0, 1, 2, 4], "requir": [0, 1, 2, 11, 25, 43], "less": [0, 1, 2, 3, 5, 13, 15, 20], "space": [0, 1, 2, 4, 41], "per": [0, 1, 2], "If": [0, 1, 2, 5, 6, 7, 20, 36, 43, 51, 58, 59], "libsemigroup": [0, 1, 2, 4, 5, 9, 11, 12, 18, 20, 23, 25, 28, 29, 43, 61], "ha": [0, 1, 2, 5, 6, 7, 9, 11, 12, 18, 19, 20, 26, 27, 29, 36, 40, 51, 54, 59], "been": [0, 1, 2, 5, 9, 11, 12, 18, 19, 20, 33, 36, 40, 51, 54], "compil": [0, 1, 2], "hpcombi": [0, 1, 2], "enabl": [0, 1, 2, 60], "object": [0, 1, 2, 4, 5, 7, 9, 11, 13, 15, 18, 19, 20, 36, 51, 58, 59, 60], "sse": [0, 1, 2], "avx": [0, 1, 2], "instruct": [0, 1, 2, 42], "set": [0, 1, 2, 3, 4, 5, 8, 9, 11, 12, 18, 19, 20, 40, 42, 44, 51, 54, 58], "veri": [0, 1, 2, 5, 9, 25, 26, 29], "fast": [0, 1, 2, 4, 13], "manipul": [0, 1, 2, 19, 59], "while": [0, 1, 2, 13, 36, 51, 58], "have": [0, 1, 2, 4, 13, 33, 36, 37, 43, 51, 52, 58], "ident": [0, 1, 2, 3, 9, 11, 12, 13, 15, 31, 36, 51, 58, 59], "method": [0, 1, 2, 4, 12, 13, 20, 25, 30, 32, 34, 35, 36, 38, 39, 40, 41, 43, 48, 49, 50, 51, 53, 54, 58], "so": [0, 1, 2, 8, 13, 30, 33, 36, 51, 58, 59], "we": [0, 1, 2, 5, 9, 11, 12, 13, 18, 20, 29, 36, 40, 51, 54, 56, 58], "wa": [0, 1, 2, 4, 5, 9, 11, 12, 13, 18, 19, 20, 25, 36, 40, 51, 54, 58], "implement": [0, 1, 2, 5, 9, 11, 12, 13, 18, 19, 20, 26, 29, 36, 40, 42, 44, 51, 54, 61], "A": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 25, 31, 32, 33, 34, 35, 36, 38, 40, 41, 47, 49, 51, 53, 54, 58, 59], "f": [0, 1, 2, 10, 24, 43], "just": [0, 1, 2, 43], "inject": [0, 5, 20], "defin": [0, 1, 2, 4, 5, 9, 10, 12, 19, 20, 25, 28, 36, 51, 58, 59], "ani": [0, 1, 2, 4, 5, 6, 9, 11, 12, 13, 18, 20, 30, 31, 33, 36, 43, 45, 48, 49, 51, 58, 59], "subset": 0, "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 24, 43, 59], "1": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 18, 20, 21, 22, 24, 59], "ldot": [0, 1, 2, 5, 20, 59], "n": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 59], "some": [0, 1, 2, 3, 5, 6, 9, 14, 16, 17, 20, 21, 22, 23, 25, 26, 27, 29, 42, 44, 56, 58, 60], "posit": [0, 1, 2, 3, 4, 11, 13, 33, 36, 38, 39], "integ": [0, 1, 2, 3, 4, 5, 9, 11, 13, 15, 18, 20, 47, 49, 58, 59], "call": [0, 1, 2, 3, 11, 12, 15, 18, 19, 36, 40, 41, 46, 48, 49, 51, 54, 59], "degre": [0, 1, 2, 3, 6, 7, 10, 15, 31, 36, 37, 45, 51, 52], "store": [0, 1, 2, 13, 15, 20], "arrai": [0, 1, 2], "__eq__": [0, 1, 2, 3, 13, 15], "self": [0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 15, 18, 20, 26, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 52, 53, 54, 58, 60], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 18, 19, 20, 31, 35, 38, 40, 41, 47, 49, 53, 54, 58, 60], "equal": [0, 1, 2, 3, 4, 6, 7, 9, 12, 13, 15, 18, 19, 20, 33, 36, 38], "comparison": [0, 1, 2, 3, 11, 12, 13, 15], "true": [0, 1, 2, 3, 4, 5, 9, 11, 12, 13, 15, 18, 19, 20, 31, 36, 40, 51, 54, 58, 59, 60], "compar": [0, 1, 2, 3, 15, 20], "valu": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 15, 18, 20, 26, 31, 41, 58, 59], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 52, 53, 54, 58, 59, 60], "__getitem__": [0, 1, 2, 3, 13, 15], "int": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 45, 47, 48, 49, 50, 58, 59], "whose": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 20, 33], "sought": [0, 1, 2, 8, 33], "__lt__": [0, 1, 2, 3, 13, 15], "than": [0, 1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 19, 20, 58, 59], "list": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 32, 33, 34, 37, 38, 51, 52, 58, 59], "lexicograph": [0, 1, 2, 6, 20, 63], "__mul__": [0, 1, 2, 3, 13, 15], "right": [0, 1, 2, 3, 4, 5, 9, 11, 12, 15, 20, 26, 32, 36, 59], "multipli": [0, 1, 2, 3, 13, 15, 33, 36], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 18, 20, 30, 31, 32, 33, 34, 35, 37, 40, 41, 45, 47, 48, 49, 50, 54, 58, 59], "static": [0, 1, 2, 3, 4, 6, 15], "make": [0, 1, 2, 3, 7, 13, 15, 18, 43, 59], "l": [0, 1, 2, 7, 10, 43, 46, 47, 49, 51], "construct": [0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 15, 18, 19, 20, 37, 46, 51, 52, 58, 60], "valid": [0, 1, 2, 3, 6, 9, 11, 12, 13, 15, 18, 58, 59], "initi": [0, 1, 2, 18, 20], "follow": [0, 1, 2, 7, 43], "under": [0, 1, 2], "newli": [0, 1, 2, 3, 18, 37], "rais": [0, 1, 2, 7, 9, 10, 12, 13, 18, 19, 20, 37, 49, 52, 58, 59], "runtimeerror": [0, 1, 2, 7, 10, 13, 18, 19, 20, 37, 49, 52, 58, 59], "exce": [0, 1, 2, 20, 59], "len": [0, 1, 2, 11, 59], "make_ident": [0, 1, 2, 3, 13, 15], "m": [0, 1, 2, 6, 7, 10, 13, 43], "given": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 33, 36, 41, 59, 63], "product_inplac": [0, 1, 2, 3, 13, 15], "x": [0, 1, 2, 3, 4, 6, 13, 15, 16, 17, 21, 22, 25, 33, 34, 38, 47, 48, 49, 53], "y": [0, 1, 2, 3, 4, 13, 15, 38], "two": [0, 1, 2, 3, 5, 9, 11, 12, 13, 15, 18, 19, 20, 24], "product": [0, 1, 2, 3, 11, 13, 15], "rank": [0, 1, 2, 3], "distinct": [0, 1, 2, 5, 20, 37, 52, 59], "The": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 36, 41, 42, 43, 44, 46, 55, 58, 59, 61], "its": [0, 1, 2, 7, 8, 9, 11, 12, 18, 24, 25, 31, 35, 36, 38, 43, 58, 59], "iter": [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 16, 17, 19, 20, 21, 22, 30, 33, 35, 36, 48, 49, 51], "first": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 25, 30, 33, 35, 36, 38, 39, 40, 43, 48, 49, 51, 54, 59], "invers": [0, 1, 9, 10, 11, 12, 18, 59], "dom": 0, "ran": 0, "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 20, 25, 37, 51, 52, 59], "domain": 0, "rang": [0, 6, 11, 12, 14, 16, 17, 19, 20, 21, 22, 63], "replac": [0, 18, 59], "content": [0, 4, 13], "anoth": [0, 19, 25, 59], "invert": 0, "left_on": 0, "left": [0, 3, 4, 5, 9, 10, 11, 12, 15, 18, 19, 20, 26, 32, 36, 59], "right_on": 0, "undef": 0, "repres": [0, 4, 5, 9, 11, 12, 20, 33, 36, 46, 47, 55, 58, 59], "undefin": [0, 5, 6, 7, 8, 18, 20, 25, 38, 59], "perm": [1, 28], "biject": [1, 10], "whole": [1, 2], "transf": 2, "_libsemigroups_pybind11": [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 18, 19, 20, 26, 60], "arg0": [3, 4, 6, 8, 9, 11, 12, 20], "partit": [3, 10, 15], "2n": 3, "non": [3, 4, 5, 20, 34, 36, 51, 59], "neg": [3, 5, 20], "see": [3, 4, 7, 10, 26, 29, 42, 43, 44, 46, 58, 59, 61], "semigroup": [3, 5, 9, 10, 11, 12, 18, 19, 20, 24, 25, 26, 28, 31, 36, 42, 44, 46, 51, 57, 58, 59], "packag": [3, 23, 24, 25, 42, 43], "gap": [3, 9, 12, 20, 24], "more": [3, 4, 19, 20, 25, 46], "detail": [3, 4, 12, 26, 29, 44, 46, 61], "index": [3, 5, 9, 10, 11, 12, 13, 15, 20, 25, 30, 33, 34, 35, 36, 38, 39, 48, 51, 58, 59], "block": [3, 10], "is_transverse_block": 3, "check": [3, 4, 5, 6, 7, 9, 11, 12, 18, 19, 20, 30, 31, 35, 36, 38, 40, 51, 54, 58, 59], "transvers": 3, "left_block": 3, "lookup": 3, "th": [3, 4, 5, 9, 11, 12, 13, 20, 59], "entri": [3, 4, 13], "indic": [3, 9, 13, 20, 26, 33, 36, 59], "whether": [3, 4, 11, 12, 18, 19, 20, 25, 40, 54, 58, 60], "argument": [3, 5, 7, 9, 10, 11, 12, 13, 15, 18, 20, 36, 40, 51, 54, 58, 59], "number_of_block": 3, "number_of_left_block": 3, "number_of_right_block": 3, "thread_id": [3, 15], "modifi": [3, 6, 13, 59], "current": [3, 9, 11, 12, 18, 20, 36, 40, 41, 45, 49, 50, 51, 54], "place": [3, 13, 59], "second": [3, 9, 11, 12, 33, 38, 59], "thread": [3, 5, 9, 11, 12, 15, 18, 20, 36, 40, 41, 51, 54], "default": [3, 6, 10, 12, 15, 19, 60], "right_block": 3, "boolean": [4, 13], "matric": [4, 13, 25, 55], "dimens": [4, 13], "8": [4, 10, 24, 43], "small": [4, 11, 20, 25], "over": [4, 5, 9, 12, 13, 14, 16, 17, 20, 21, 22, 25, 55, 59], "semir": [4, 13, 25, 55], "gener": [4, 5, 9, 10, 12, 18, 19, 20, 25, 33, 37, 38, 52, 59, 63], "note": [4, 45, 49, 50, 58, 59], "all": [4, 5, 8, 13, 19, 20, 25, 26, 29, 31, 36, 37, 42, 43, 45, 49, 51, 52, 59], "matrix": [4, 6, 28], "user": 4, "taken": 4, "doe": [4, 6, 43, 48, 49, 59], "affect": 4, "result": [4, 59], "calcul": [4, 20], "can": [4, 5, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 26, 29, 37, 40, 43, 44, 52, 54, 58, 59, 60], "No": [4, 20, 33, 37, 59], "uniniti": [4, 13], "binari": [4, 15, 20, 24, 51], "represent": [4, 7], "which": [4, 5, 6, 9, 10, 12, 13, 15, 20, 25, 36, 37, 42, 51, 58, 59], "correspond": [4, 5, 7, 18, 20, 38], "truthi": 4, "falsi": 4, "each": [4, 6, 51, 59], "sublist": 4, "must": [4, 9, 58], "length": [4, 6, 7, 9, 10, 11, 12, 14, 16, 19, 21, 33, 36, 59], "also": [4, 26, 27, 29, 58, 59], "further": [4, 25, 26, 29, 44, 61], "arg": [4, 5, 6, 7, 8, 9, 11, 12, 15, 18, 20], "kwarg": [4, 5, 6, 7, 8, 9, 11, 12, 15, 18, 20], "overload": [4, 5, 6, 7, 8, 9, 11, 12, 15, 18, 20, 36, 58], "__init__": [4, 5, 6, 8, 9, 11, 13, 18, 20, 36, 37, 51, 52], "uninitialis": 4, "col_space_basi": 4, "zero": [4, 59], "column": [4, 10, 13], "form": [4, 9, 11, 12, 20, 59], "basi": 4, "import": [4, 5, 7, 11, 12, 13, 18, 20, 59], "10000000": 4, "01000000": 4, "00000000": 4, "column_space_s": 4, "size": [4, 5, 9, 11, 12, 18, 20, 30, 36, 41, 45, 46, 47, 51, 58, 59], "row": [4, 10, 13], "4": [4, 7, 10, 11, 13, 18, 20, 24], "get": [4, 6, 11, 20, 43, 58], "j": [4, 6, 7, 10, 18, 24, 33], "fals": [4, 5, 9, 11, 12, 18, 19, 20, 31, 40, 54, 59], "is_regular_el": [4, 49, 51], "regular": [4, 46, 47, 49, 51], "element": [4, 9, 11, 12, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 51, 52, 53, 59], "full": [4, 20, 29, 45, 49, 50], "monoid": [4, 9, 10, 11, 12, 18, 20, 24, 25, 26, 29, 31, 36, 42, 57, 58, 59, 61], "appropri": 4, "minimum_dim": 4, "maxim": [4, 59], "2": [4, 5, 7, 9, 10, 13, 14, 18, 20, 21, 22, 24, 26, 59], "number_of_col": [4, 13], "number_of_row": [4, 13], "dim": 4, "main": [4, 5, 11, 12, 18, 20, 26, 29, 36, 40, 51, 54, 61], "diagon": 4, "everi": [4, 5, 6, 7, 8, 9, 13, 45, 49, 50, 58, 59], "other": [4, 11, 12, 18, 20, 37, 40, 52, 54, 58, 59], "00100000": 4, "00010000": 4, "random": [4, 6, 20], "row_space_basi": 4, "row_space_s": 4, "alwai": 4, "even": [4, 59], "64": 4, "128": 4, "val": [4, 10, 12, 41, 58, 59, 60], "11000000": 4, "swap": [4, 13], "to_int": 4, "obtain": [4, 46], "interpret": 4, "sequenc": 4, "bit": 4, "read": 4, "top": 4, "bottom": 4, "realis": 4, "4647714815446351872": 4, "transpos": [4, 13], "On": [5, 9, 11, 12, 18, 24], "describ": [5, 9, 10, 11, 12, 18, 36, 51, 56, 57, 58, 59], "comput": [5, 6, 9, 12, 14, 20, 24, 25, 26, 29, 33, 36, 42, 44, 46, 49, 60, 61], "run": [5, 9, 11, 12, 18, 19, 20, 26, 29, 43, 44, 59], "applic": [5, 9, 18, 24, 51], "algorithm": [5, 6, 9, 11, 12, 18, 19, 20, 24, 26, 29, 36, 40, 42, 44, 46, 51, 54, 58, 59, 61], "possibli": [5, 9, 18], "variant": [5, 9, 24, 26, 29], "same": [5, 9, 11, 12, 18, 19, 20, 30, 37, 51, 52, 59], "parallel": [5, 9, 26, 29], "provid": [5, 9, 58], "conveni": [5, 9, 26, 29], "present": [5, 9, 10, 11, 12, 18, 19, 20, 24, 25, 26, 33, 36, 42, 43], "customis": [5, 9, 26, 29], "lack": [5, 9, 26, 29], "fine": [5, 9, 26, 29], "grain": [5, 9, 26, 29], "control": [5, 9, 26, 29, 41], "offer": [5, 9, 26, 29], "individu": [5, 9, 26, 29], "toddcoxet": [5, 9, 11, 12, 18, 20, 26], "knuthbendix": [5, 9, 12, 20, 25, 26, 29, 59], "congruence_kind": [5, 11, 12, 18, 20, 26], "tril": [5, 20, 31], "fpsemigroup": [5, 29], "": [5, 9, 11, 12, 18, 19, 20, 24, 29, 43, 44, 46, 58, 59], "set_alphabet": [5, 9, 11, 12], "3": [5, 7, 9, 10, 13, 16, 18, 20, 21, 24], "set_ident": [5, 9, 11, 12], "add_rul": [5, 9, 11, 12, 59], "is_obviously_infinit": [5, 9, 11, 12], "c": [5, 9, 11, 12, 13, 19, 20, 23, 24, 25, 43, 58, 59], "twosid": [5, 11, 12, 18, 20, 26], "add_pair": [5, 11, 12, 18, 20], "number_of_class": [5, 20], "kind": [5, 13, 20], "side": [5, 9, 10, 11, 12, 20, 26, 59], "option": [5, 10, 20], "empti": [5, 7, 12, 20, 37, 52, 58, 59], "interfac": [5, 20, 44], "handed": [5, 20, 26], "complex": [5, 7, 20], "constant": [5, 20, 25], "set_number_of_gener": [5, 11, 12, 18, 20], "froidurepinbas": [5, 9, 11, 12, 20], "froidurepin": [5, 9, 11, 12, 20, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 59, 61], "accord": [5, 12, 20], "linear": [5, 20], "u": [5, 9, 11, 12, 20, 59], "v": [5, 6, 9, 11, 12, 20, 24, 59], "add": [5, 6, 7, 8, 9, 11, 12, 13, 20, 25, 29, 34, 36, 48, 51, 59], "pair": [5, 6, 12, 20, 59], "word": [5, 9, 11, 12, 18, 19, 20, 33, 36, 37, 38, 40, 52, 54, 58, 59], "class_index_to_word": [5, 20], "where": [5, 6, 7, 10, 20, 59], "infinit": [5, 9, 11, 12, 20], "mani": [5, 20, 49], "fix": [5, 20, 25], "want": [5, 9, 10, 11, 12, 20], "find": [5, 7, 9, 11, 12, 20, 36, 38, 43, 59], "const_contain": [5, 20], "known": [5, 11, 20, 36, 51], "belong": [5, 9, 12, 20, 58], "unknown": [5, 20], "otherwis": [5, 7, 9, 11, 12, 19, 20], "dead": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "runner": [5, 9, 11, 12, 20, 36, 40, 51, 54], "finish": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54, 59], "complet": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "generating_pair": [5, 20], "has_knuth_bendix": [5, 9], "being": [5, 9, 11, 12, 20, 51, 59], "has_parent_froidure_pin": [5, 20], "congruenceinterfac": [5, 20], "creat": [5, 20, 25, 43], "has_quotient_froidure_pin": [5, 20], "know": [5, 20], "isomorph": [5, 9, 11, 12, 20, 59], "quotient": [5, 13, 20], "has_todd_coxet": [5, 9], "is_quotient_obviously_finit": [5, 20], "obvious": [5, 9, 11, 12, 20], "finit": [5, 9, 10, 11, 12, 18, 19, 20, 24, 25, 31, 36, 42, 44, 46, 51, 61], "is_quotient_obviously_infinit": [5, 20], "kill": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "stop": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "safe": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "knuth_bendix": [5, 9], "total": [5, 6, 20, 33, 36], "order": [5, 6, 7, 10, 19, 20, 30, 37, 51, 52, 58, 59, 63], "non_trivial_class": [5, 20], "trivial": [5, 6, 7, 20, 25, 59], "positive_infin": [5, 6, 9, 11, 12, 19, 20, 25], "case": [5, 6, 20, 49], "number_of_generating_pair": [5, 20], "ad": [5, 7, 9, 11, 12, 20, 25, 59], "number_of_gener": [5, 20, 34, 36, 48, 51], "number_of_non_trivial_class": [5, 20], "parent_froidure_pin": [5, 20], "exist": [5, 20, 25, 59], "quotient_froidure_pin": [5, 20], "parent": [5, 8, 20], "report": [5, 9, 11, 12, 18, 20, 60], "time": [5, 9, 11, 12, 13, 18, 20, 26, 29, 36, 40, 44, 51, 54, 59, 60], "report_everi": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "t": [5, 6, 9, 11, 12, 13, 18, 19, 20, 40, 54, 59], "datetim": [5, 9, 11, 12, 18, 20, 40, 54, 59], "timedelta": [5, 9, 11, 12, 18, 20, 40, 54, 59], "minimum": [5, 6, 9, 11, 12, 14, 18, 19, 20, 36, 40, 51, 54, 59], "elaps": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "between": [5, 6, 9, 11, 12, 18, 19, 20, 36, 40, 51, 54, 59], "amount": [5, 9, 11, 12, 18, 20, 26, 29, 36, 40, 44, 51, 54], "report_why_we_stop": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "why": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "underli": [5, 13, 18, 20], "determin": [5, 10, 12, 18, 19, 24, 26, 36], "structur": [5, 20, 44, 61], "run_for": [5, 9, 11, 12, 18, 20, 26, 29, 36, 40, 44, 51, 54], "tc": [5, 11, 12, 18, 20], "1000": [5, 11, 12, 18, 20], "999": [5, 11, 12, 18, 20], "microsecond": [5, 11, 12, 18, 20], "10": [5, 7, 10, 11, 12, 14, 18, 20, 24], "run_until": [5, 9, 11, 12, 18, 20, 26, 29, 36, 40, 44, 51, 54], "func": [5, 9, 11, 12, 18, 20, 40, 54, 59], "std": [5, 11], "__1": [5, 11], "until": [5, 9, 11, 12, 18, 20, 26, 29, 36, 40, 44, 51, 54, 59], "nullari": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "predic": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "callabl": [5, 9, 11, 12, 18, 20, 40, 54], "stopped_by_pred": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "should": [5, 9, 11, 12, 13, 18, 20, 26, 36, 40, 43, 46, 51, 54, 58], "pass": [5, 9, 10, 11, 12, 18, 20, 36, 40, 51, 54], "timed_out": [5, 9, 11, 12, 18, 20, 36, 40, 51, 54], "out": [5, 6, 7, 11, 12, 18, 20, 25, 36, 40, 51, 54, 60], "todd_coxet": [5, 9], "word_to_class_index": [5, 20], "w": [5, 9, 11, 12, 18, 19, 20, 33, 38, 59], "surject": [5, 20], "either": [5, 20, 37, 59], "node": [6, 7, 8, 15], "digraph": [6, 7, 12, 25], "copi": [6, 8, 12, 13, 15, 18, 20, 33, 34, 36, 37, 48, 51, 52], "add_edg": [6, 7], "lbl": 6, "edg": [6, 7, 8], "label": [6, 7, 8, 19], "sourc": [6, 7, 19], "target": [6, 19], "add_nod": [6, 8], "nr": 6, "add_to_out_degre": 6, "new": [6, 7, 12, 13, 15, 20, 24, 25, 34, 37, 41, 59], "member": [6, 12, 20, 26, 58], "df": 6, "depth": 6, "search": 6, "adjac": [6, 15], "multipl": [6, 13], "acycl": [6, 7], "dynam": 6, "program": [6, 24], "approach": 6, "try": [6, 25], "utilis": 6, "corner": 6, "automat": 6, "number_of_path": [6, 19], "tri": 6, "decid": 6, "best": 6, "properti": [6, 7, 12, 20], "name": [6, 12, 20, 42, 43], "edges_iter": 6, "neighbor": [6, 7], "next_neighbor": 6, "tupl": [6, 9, 10, 11, 12, 13], "next": [6, 20], "doesn": 6, "specif": [6, 10], "via": [6, 10, 33, 35, 36, 38, 43, 46], "nodes_iter": 6, "number_of_edg": 6, "incid": 6, "number_of_nod": [6, 8, 18], "path": [6, 7, 19, 20], "origin": [6, 18], "min": [6, 11, 12, 13, 14, 19], "max": [6, 11, 12, 13, 14, 19], "lgrthm": 6, "start": [6, 7, 9, 11, 12, 18, 20, 36, 40, 43, 51, 54, 59], "count": [6, 11, 12, 37, 52], "maximum": [6, 11, 12, 14, 16, 19, 21, 33, 36, 41, 59], "arg1": [6, 20], "arg2": 6, "positiveinfin": 6, "number_of_paths_algorithm": 6, "end": [6, 7], "number_of_scc": 6, "strongli": 6, "connect": 6, "compon": 6, "out_degre": 6, "panilo_iter": 6, "consist": [6, 7, 9, 13, 58, 59], "last": [6, 7, 16, 17, 21, 22, 36, 39, 59], "param": 6, "enumer": [6, 20, 26, 29, 30, 33, 36, 37, 38, 40, 45, 48, 49, 50, 51], "panislo_iter": 6, "short": [6, 19, 20, 33, 36, 63], "lex": [6, 19, 20, 33, 36, 63], "pilo_iter": 6, "pislo_iter": 6, "pstislo_iter": 6, "arg3": 6, "nr_node": 6, "random_acycl": 6, "nr_edg": 6, "reserv": [6, 20, 36, 41], "ensur": 6, "capac": [6, 20, 36, 41], "reverse_nodes_iter": 6, "revers": [6, 10, 59], "reverse_spanning_forest": 6, "forest": [6, 27], "compris": 6, "span": [6, 27], "tree": [6, 27], "scc": 6, "root": 6, "orient": [6, 10], "toward": 6, "root_of_scc": 6, "nd": 6, "scc_id": 6, "id": [6, 9, 11, 12], "scc_iter": 6, "scc_roots_iter": 6, "sccs_iter": 6, "spanning_forest": 6, "awai": 6, "unsafe_neighbor": 6, "unsafe_next_neighbor": 6, "exactli": 6, "add_cycl": 7, "cycl": 7, "action": [7, 25], "dot": 7, "d": [7, 12, 24, 25, 43, 45, 46, 47, 49, 50, 51], "graphviz": 7, "input": [7, 18, 19, 20, 58, 59], "exampl": [7, 11, 12, 14, 16, 17, 18, 20, 21, 22, 25, 26, 29, 44, 59], "action_digraph_help": [7, 18], "5": [7, 10, 13, 18, 24], "view": 7, "follow_path": [7, 25], "lead": 7, "is_acycl": 7, "direct": 7, "num_nod": 7, "2nd": [7, 15], "when": [7, 20, 59, 60], "o": [7, 25, 43], "mn": [7, 12], "7": [7, 10, 13, 18], "out_neighbor": 7, "18446744073709551615": 7, "topological_sort": 7, "topolog": 7, "below": [7, 26, 29, 44, 61], "possibl": [7, 13, 20, 33, 38, 43, 47, 49, 53, 55, 59], "occur": [7, 11, 37, 52, 59], "befor": [7, 11, 12, 18, 36, 40, 43, 51, 54, 59], "reachabl": 7, "item": [7, 37, 52], "initialis": [8, 18, 58], "constructor": [8, 12, 15, 20], "clear": 8, "remov": [8, 25, 59], "parent_iter": 8, "gen": 8, "relat": [9, 10, 11, 12, 15, 18, 20, 24, 25, 30, 32, 34, 35, 38, 39, 40, 42, 48, 50, 53, 54, 58, 59, 62], "rel": [9, 11, 12, 20], "rule": [9, 11, 12, 25, 33, 36, 58, 59], "str": [9, 11, 12, 16, 17, 20, 58, 59], "hand": [9, 10, 11, 12, 59], "alphabet": [9, 11, 12, 14, 16, 17, 18, 21, 22, 58, 59], "string": [9, 11, 12, 18, 20, 21, 22, 24, 25, 58, 59, 63], "letter": [9, 11, 12, 14, 21, 22, 25, 36, 39, 58, 59], "char_to_uint": [9, 11, 12], "convert": [9, 11, 12, 33, 36, 59], "equal_to": [9, 11, 12, 36, 38], "froidure_pin": [9, 11, 12], "has_froidure_pin": [9, 11, 12], "alreadi": [9, 12, 18, 19, 43, 59], "except": [9, 12, 58, 59], "isn": [9, 12], "aren": [9, 12], "is_obviously_finit": [9, 11, 12], "normal_form": [9, 11, 12, 20], "normal": [9, 11, 12, 20, 59], "number_of_rul": [9, 11, 12, 33, 36], "datatim": 9, "process": [9, 11, 12, 18, 20, 25, 40, 54], "charact": [9, 11, 12, 25, 59], "set_invers": [9, 11, 12], "becaus": 9, "string_to_word": [9, 11, 12], "to_gap_str": [9, 12, 20], "command": [9, 12], "congruencewrapp": 9, "congruenc": [9, 12, 20, 25], "uint_to_char": [9, 11, 12], "validate_lett": [9, 11, 12, 58], "validate_word": [9, 11, 12], "word_to_str": [9, 11, 12], "author": [10, 11, 29, 42], "enum": [10, 12, 13, 20], "differ": [10, 51, 59], "disambigu": 10, "combin": [10, 20], "oper": [10, 13], "symmetric_group": 10, "symmetr": 10, "group": [10, 24, 42, 61], "alternating_group": 10, "altern": 10, "full_transformation_monoid": 10, "transform": [10, 24, 28], "partial_transformation_monoid": 10, "partial": [10, 20, 28, 51], "symmetric_inverse_monoid": 10, "dual_symmetric_inverse_monoid": 10, "dual": 10, "uniform_block_bijection_monoid": 10, "uniform": 10, "partition_monoid": 10, "brauer_monoid": 10, "brauer": 10, "rectangular_band": 10, "rectangular": 10, "band": 10, "stellar_monoid": 10, "stellar": 10, "chinese_monoid": 10, "chines": 10, "monogenic_semigroup": 10, "monogen": 10, "plactic_monoid": 10, "plactic": 10, "stylic_monoid": 10, "stylic": 10, "fibonacci_semigroup": 10, "fibonacci": 10, "temperley_lieb_monoid": 10, "temperlei": 10, "lieb": 10, "singular_brauer_monoid": 10, "singular": 10, "part": 10, "orientation_preserving_monoid": 10, "preserv": 10, "map": 10, "orientation_reversing_monoid": 10, "carmichael": 10, "give": 10, "burnsid": 10, "miller": 10, "p": [10, 13, 18, 24, 59], "464": 10, "1017": 10, "cbo9781139237253": 10, "comment": 10, "9": [10, 24], "1007": [10, 24], "978": 10, "84800": 10, "281": 10, "coxet": [10, 18, 26, 29, 42], "moser": 10, "ch": 10, "prop": 10, "hdl": 10, "handl": 10, "net": 10, "10023": 10, "2821": 10, "moor": 10, "abov": [10, 43], "modulo": 10, "aizenstat": 10, "iwahori": 10, "theorem": 10, "machin": [10, 25], "sutov": 10, "onli": [10, 13], "easdown": 10, "east": 10, "fitzgerald": 10, "section": [10, 56], "48550": 10, "arxiv": 10, "0707": 10, "2439": 10, "s0004972700037692": 10, "41": 10, "1016": [10, 24], "jalgebra": 10, "2011": 10, "04": 10, "008": 10, "paper": [10, 51], "2478": 10, "s11533": 10, "006": 10, "0017": 10, "6": [10, 13, 18], "proposit": 10, "s002339910016": 10, "39": 10, "1910": 10, "11740": 10, "1142": 10, "s0218196701000425": 10, "r": [10, 13, 20, 24, 43, 46, 47, 49, 51], "langl": 10, "mid": 10, "rangl": 10, "period": [10, 13], "s00233": 10, "022": 10, "10285": 10, "0022": 10, "4049": 10, "94": 10, "90005": 10, "1093": 10, "qmath": 10, "haab001": 10, "21136": 10, "mb": 10, "2007": 10, "134125": 10, "chain": 10, "s10012": 10, "000": 10, "0001": 10, "overlap": [11, 12, 25, 59], "k": 11, "abcd": 11, "accca": 11, "number_of_piec": 11, "small_overlap_class": 11, "bbcabcdaccaccabcddd": 11, "word_typ": 11, "const": 11, "refer": [11, 58, 59], "ith": 11, "char": [11, 12], "letter_typ": [11, 59], "fpsemigroupinterfac": 11, "has_ident": 11, "number_of_normal_form": [11, 12], "larger": [11, 12], "piec": 11, "factoris": 11, "chrono": 11, "durat": [11, 20], "long": 11, "ratio": 11, "1l": 11, "1000000000l": 11, "greatest": 11, "satisfi": [11, 59], "condit": [11, 26, 29, 44], "written": 11, "least": [11, 12, 18, 20, 33, 36, 40, 51, 54, 59], "onc": [11, 12, 18, 36, 40, 51, 54], "whatev": [11, 12, 18, 40, 54], "reason": [11, 12, 18, 40, 54], "In": [11, 12, 13, 18, 20, 24, 37, 40, 52, 54, 56, 58], "rewrit": [12, 24, 59], "system": [12, 43], "kb": [12, 20], "abc": [12, 59], "aaaa": 12, "bbbb": [12, 59], "b": [12, 16, 17, 18, 59], "cccc": 12, "abab": 12, "aaa": [12, 16, 17, 59], "bcbc": 12, "bbb": [12, 17], "confluent": [12, 24, 36], "number_of_active_rul": 12, "31": 12, "active_rul": 12, "activ": [12, 20, 43], "singl": 12, "check_confluence_interv": 12, "interv": 12, "confluenc": 12, "contains_empty_str": 12, "gilman_digraph": 12, "actiondigraph": [12, 18, 19, 25, 27], "associ": [12, 20], "gilman": [12, 24], "automata": [12, 18], "knuth_bendix_by_overlap_length": 12, "max_overlap": 12, "consid": [12, 59], "max_rul": 12, "mx": 12, "normal_forms_alphabet": 12, "lphbt": 12, "how": [12, 43], "measur": 12, "ab": [12, 16, 17, 59], "bc": [12, 59], "overlap_polici": 12, "ab_bc": 12, "max_ab_bc": 12, "polici": [12, 20], "rewritten": 12, "after": [12, 59], "variou": [13, 19, 41, 55, 59, 60], "wai": [13, 59], "base": 13, "distinguish": 13, "For": [13, 43, 59], "usual": 13, "ring": 13, "maxplu": 13, "plu": 13, "minplu": 13, "projmaxplu": 13, "project": [13, 42], "maxplustrunc": 13, "truncat": 13, "minplustrunc": 13, "ntp": 13, "natur": 13, "threshold": [13, 41], "11": 13, "tup": 13, "__iadd__": 13, "sum": [13, 59], "__imul__": 13, "scalar": 13, "work": [13, 25, 43], "squar": [13, 20], "invalid": [13, 48, 49], "number_of_word": 14, "greater": [14, 59], "1023": 14, "generalis": [15, 44], "bipartit": [15, 28], "were": [15, 25, 30], "introduc": [15, 59], "martin": 15, "mazorchuk": 15, "1st": 15, "forward": 15, "adj": 15, "through": [16, 17, 21, 22], "upper_bound": [16, 21], "past": [16, 17, 21, 22], "most": [16, 21], "ba": [16, 17, 59], "bb": [16, 17], "aa": [16, 17], "bba": 17, "bab": [17, 59], "baa": [17, 59], "abb": [17, 59], "aba": 17, "aab": 17, "procedur": [18, 29], "graph": [18, 20, 33], "factor": [18, 19], "close": 18, "todd": [18, 26, 29, 42], "theori": 18, "add_rule_and_check": [18, 59], "set_word": 18, "assert": 18, "word_graph": [18, 19], "presentationword": 18, "presentationstr": 18, "accept_st": [18, 19], "accept": [18, 19], "state": 18, "trigger": [18, 19, 20, 33, 37, 45, 48, 49, 50], "hasn": [18, 19], "produc": [18, 59], "init": [18, 19], "warn": [18, 19, 59], "problem": [18, 19, 43], "undecid": [18, 19], "mai": [18, 19, 20, 48, 49, 59], "never": [18, 19], "termin": [18, 19, 20, 36], "had": 18, "modul": 19, "equival": [19, 24, 51, 59], "is_left_factor": 19, "left_factor": 19, "number_of_left_factor": 19, "number_of_words_accept": 19, "words_accept": 19, "18446744073709551614": 19, "pstislo": 19, "inform": [19, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 45, 47, 48, 49, 50, 52, 53, 54, 60], "about": [19, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 45, 47, 48, 49, 50, 52, 53, 54], "summari": [20, 28], "term": 20, "coset": 20, "mean": 20, "execut": 20, "version": [20, 23, 25], "itself": [20, 41], "strategi": 20, "strategy_opt": 20, "felsch": 20, "standard": 20, "hlt": 20, "lookahead": 20, "lookahead_opt": 20, "save": 20, "10752": 20, "compat": 20, "number_of_idempot": [20, 35, 36, 46, 47, 50, 51], "recurs": 20, "_": 20, "knd": 20, "respect": 20, "includ": [20, 25], "tabl": 20, "fp": 20, "froidure_pin_opt": 20, "caylei": [20, 33], "froidure_pin_polici": 20, "definit": 20, "use_rel": 20, "often": 20, "faster": 20, "larg": 20, "use_cayley_graph": 20, "It": [20, 43, 44, 51, 55], "guarante": 20, "proportion": 20, "wherea": 20, "arbitrarili": 20, "high": 20, "regardless": 20, "froidur": [20, 24, 36, 42, 61], "pin": [20, 24, 36, 42, 61], "is_standard": 20, "perform": [20, 33, 43, 44, 59], "therefor": 20, "sometim": 20, "slower": 20, "detect": 20, "coincid": 20, "lower_bound": 20, "lower": 20, "bound": [20, 30, 36], "next_lookahead": 20, "done": 20, "shortlex": [20, 59], "random_interv": 20, "nanosecond": 20, "randomli": 20, "select": 20, "random_shuffle_generating_pair": 20, "shuffl": 20, "data": [20, 58], "deduct": 20, "dure": [20, 60], "shrink_to_fit": 20, "releas": [20, 29], "memori": 20, "free": 20, "unnecessari": 20, "sort_generating_pair": 20, "sort": [20, 30, 36, 38, 59], "hazelgrov": 20, "leech": 20, "trotter": 20, "analog": 20, "ac": [20, 23, 59], "style": 20, "approxim": 20, "sislo": [22, 63], "jame": [23, 24, 25], "mitchel": [23, 24, 25], "jdm3": 23, "st": 23, "andrew": 23, "uk": 23, "maria": 23, "tsalak": 23, "mt200": 23, "murrai": 23, "whyte": 23, "mw231": 23, "nicola": 23, "thieri": 23, "help": 23, "understand": 23, "ecosystem": 23, "integr": 23, "code": [23, 25], "python": [23, 25, 43], "preliminari": [23, 42, 44], "bind": 23, "cython": 23, "cppyi": 23, "chinmaya": [23, 25], "nagpal": [23, 25], "chinmaya1011": 23, "gmail": 23, "com": [23, 25, 43], "resolv": [23, 25], "issu": [23, 25], "fp97": 24, "\u00e9": 24, "roniqu": 24, "jean": [24, 36], "eric": [24, 36], "foundat": 24, "mathemat": 24, "io": 24, "de": 24, "aneiro": 24, "1997": 24, "112": 24, "126": 24, "springer": 24, "berlin": 24, "gil79": 24, "robert": 24, "h": [24, 46, 47, 51], "journal": 24, "algebra": 24, "57": 24, "544": 24, "554": 24, "april": 24, "1979": 24, "hol19": 24, "derek": 24, "holt": 24, "kbmag": 24, "ersion": 24, "juli": 24, "2019": 24, "url": 24, "http": [24, 25, 43], "github": [24, 25, 42, 43], "jan12": 24, "matthia": 24, "jantzen": 24, "volum": 24, "14": [24, 42], "scienc": 24, "busi": 24, "media": 24, "2012": 24, "jmp17": 24, "juliu": 24, "jonusa": 24, "marku": 24, "pfeiffer": 24, "roidur": 24, "port": 24, "math": 24, "74": 24, "173": 24, "200": 24, "2017": 24, "doi": [24, 25], "org": [24, 25], "4171": 24, "pm": 24, "2001": 24, "knu09": 24, "donald": 24, "e": [24, 58, 59], "knuth": [24, 26, 29, 42, 59], "art": 24, "fascicl": 24, "bitwis": 24, "trick": 24, "techniqu": 24, "decis": 24, "diagram": 24, "addison": 24, "weslei": 24, "profession": 24, "12th": 24, "edit": 24, "2009": 24, "isbn": 24, "0321580508": 24, "9780321580504": 24, "kon94": 24, "janusz": [24, 51], "konieczni": [24, 25, 42, 45, 47, 48, 49, 50, 52, 53, 54, 61], "green": 24, "forum": 24, "48": 24, "235": 24, "252": 24, "1994": 24, "bf02573672": 24, "lm90": 24, "gerard": 24, "lallement": [24, 42, 44, 51], "mcfadden": [24, 42, 44, 51], "g": 24, "reen": 24, "symbol": 24, "481": 24, "498": 24, "1990": 24, "s0747": 24, "7171": 24, "08": 24, "80057": 24, "sim94": 24, "charl": 24, "sim": [24, 42, 61], "encyclopedia": 24, "cambridg": 24, "univers": 24, "press": 24, "england": 24, "york": 24, "521": 24, "43213": 24, "opac": 24, "inria": 24, "fr": 24, "record": 24, "b1082972": 24, "minor": 25, "featur": [25, 29, 43], "namespac": 25, "add_zero_rul": [25, 59], "are_rules_sort": [25, 59], "change_alphabet": [25, 59], "first_unused_lett": [25, 59], "greedy_reduce_length": [25, 59], "longest_rul": [25, 59], "shortest_rul": [25, 59], "longest_rule_length": [25, 59], "shortest_rule_length": [25, 59], "make_semigroup": [25, 59], "improv": 25, "adjust": 25, "forthcom": 25, "chang": [25, 59], "updat": 25, "depend": [25, 59], "permit": 25, "wheel": 25, "built": 25, "adapt": 25, "recent": 25, "support": [25, 59], "librari": [25, 43], "stephen": [25, 29], "helper": [25, 27, 29, 57, 62], "replace_word": [25, 59], "mtwhyte": 25, "pull": 25, "84": 25, "neighbour": 25, "91": 25, "fpsemi": 25, "85": 25, "93": 25, "miss": [25, 29], "header": 25, "cong": 25, "cpp": 25, "77": 25, "79": 25, "encod": 25, "82": 25, "80": 25, "better": 25, "__repr__": 25, "86": 25, "kambit": [25, 29], "bugfix": 25, "allow": [25, 58], "zenodo": 25, "pick": 25, "sims1": 25, "coupl": 25, "negative_infin": 25, "properli": 25, "matrix_help": 25, "pow": 25, "__pow__": 25, "those": 25, "runtim": 25, "test": [25, 36, 38, 46, 47, 49, 51, 53], "now": 25, "pytest": 25, "exclus": 25, "low": 25, "futureproof": 25, "against": 25, "templat": 25, "49": 25, "pypi": 25, "mac": [25, 43], "arm": 25, "job": 25, "upload": 25, "made": [25, 59], "hopefulli": 25, "pkgconfig": 25, "yet": 25, "exceedingli": 25, "previou": 25, "sever": [26, 29, 42, 61], "bendix": [26, 29, 42, 59], "brute": [26, 29], "forc": [26, 29], "link": [26, 29, 61, 62], "As": [26, 29, 59], "predetermin": [26, 29], "interact": [26, 29, 44], "sens": [26, 29, 44], "thei": [26, 29, 37, 44, 52], "particular": [26, 29, 44], "met": [26, 29, 44], "limit": [27, 40], "There": [27, 37, 52], "overview": 28, "permut": [28, 42], "pbr": 28, "At": [29, 43], "plan": 29, "later": 29, "api": 29, "access": [30, 36], "__iter__": [30, 36], "current_s": [30, 36, 40, 45, 51], "far": [30, 33, 36], "sorted_at": [30, 36], "is_monoid": [31, 36], "is_finit": [31, 36], "py": [31, 59], "obj": 31, "right_cayley_graph": [32, 36], "left_cayley_graph": [32, 36], "current_length": [33, 36], "po": [33, 39], "current_max_word_length": [33, 36], "current_number_of_rul": [33, 36], "found": [33, 36, 40, 51, 59], "minimal_factoris": [33, 36], "product_by_reduct": [33, 36], "fast_product": [33, 36], "word_to_el": [33, 36], "evalu": 33, "add_gener": [34, 36, 48, 51], "coll": [34, 37, 52], "collect": [34, 36], "closur": [34, 36], "redund": [34, 36, 59], "copy_add_gener": [34, 36], "copy_closur": [34, 36], "is_idempot": [35, 36], "articl": [36, 51], "veroniqu": 36, "invok": [36, 51], "batch_siz": [36, 41], "concurrency_threshold": [36, 41], "immut": [36, 41], "max_thread": [36, 41], "request": [36, 41], "current_posit": [36, 38], "position_to_sorted_posit": [36, 38], "necessari": [36, 38, 49], "sorted_posit": [36, 38], "final_lett": [36, 39], "first_lett": [36, 39], "longest": [36, 39, 59], "proper": [36, 39], "duplic": [37, 52, 59], "although": [37, 52], "do": [37, 43, 52, 59], "precis": [37, 52], "exact": 37, "transf1": 38, "batch": 41, "concurr": 41, "number_of_thread": 41, "schreier": [42, 61], "act": [42, 44], "expos": [42, 44, 61], "much": 42, "develop": 42, "here": 42, "instal": 42, "changelog": 42, "pip3": 43, "assum": 43, "you": [43, 46], "anaconda": 43, "miniconda": 43, "download": 43, "websit": 43, "might": 43, "good": 43, "idea": [43, 58], "environ": 43, "forg": 43, "m1": 43, "processor": 43, "guid": 43, "git": 43, "clone": 43, "cd": 43, "To": 43, "curl": 43, "latest": 43, "tar": 43, "gz": 43, "xf": 43, "rm": 43, "abl": 43, "python3": 43, "jinja2": 43, "sphinx": 43, "sphinx_rtd_them": 43, "sphinxcontrib": 43, "bibtex": 43, "sphinx_copybutton": 43, "osx": 43, "doc": 43, "Then": 43, "ought": 43, "directori": 43, "suggest": 43, "like": 43, "pleas": 43, "tracker": 43, "relev": 44, "minim": [44, 59], "certain": [44, 63], "remain": 44, "dclass": [44, 47, 49], "frame": [45, 46, 49, 50, 51], "mathscr": [45, 46, 47, 49, 50, 51], "nest": 46, "abstract": 46, "cannot": 46, "directli": 46, "instead": 46, "d_class_of_el": [46, 49, 51], "membership": [46, 47], "is_regular_d_class": [46, 47], "number_of_l_class": [46, 47, 49, 51], "number_of_r_class": [46, 47, 49, 51], "idempot": [46, 47], "rep": [46, 47], "size_h_class": [46, 47], "them": 49, "d_class": [49, 51], "regular_d_class": [49, 51], "number_of_d_class": [49, 51], "number_of_h_class": [49, 51], "current_number_of_d_class": [49, 51], "current_number_of_r_class": [49, 51], "current_number_of_l_class": [49, 51], "current_number_of_h_class": [49, 51], "number_of_regular_d_class": [49, 51], "number_of_regular_r_class": [49, 51], "number_of_regular_l_class": [49, 51], "current_number_of_regular_d_class": [49, 51], "current_number_of_regular_r_class": [49, 51], "current_number_of_regular_l_class": [49, 51], "current_number_of_idempot": [50, 51], "similar": 51, "subsemigroup": 51, "though": 51, "essenti": 51, "happen": 51, "__contains__": [51, 53], "bmat8": 55, "reportguard": 56, "intend": 58, "shallow": 58, "wrapper": 58, "around": 58, "realli": 58, "alphabet_from_rul": 58, "contains_empty_word": [58, 59], "validate_alphabet": 58, "validate_rul": [58, 59], "alph": 58, "union": [58, 59], "match": 58, "rather": 58, "submodul": 59, "add_identity_rul": 59, "add_inverse_rul": 59, "u_1": 59, "v_1": 59, "u_n": 59, "v_n": 59, "cdot": 59, "re": 59, "greedili": 59, "reduc": 59, "longest_common_subword": 59, "common": 59, "subword": 59, "normalize_alphabet": 59, "reduce_compl": 59, "lvert": 59, "rvert": 59, "redundant_rul": 59, "remove_duplicate_rul": 59, "remove_redundant_gener": 59, "remove_trivial_rul": 59, "replace_subword": 59, "occupi": 59, "shortest": 59, "sort_each_rul": 59, "sort_rul": 59, "ca": 59, "cb": 59, "cc": 59, "a_i": 59, "b_i": 59, "a_n": 59, "b_1": 59, "b_n": 59, "3rd": 59, "bac": 59, "lhop": 59, "rhop": 59, "entir": 59, "q": 59, "z": 59, "new_alphabet": 59, "write": 59, "agre": 59, "visibl": 59, "ascii": 59, "invis": 59, "ones": 59, "human": 59, "readabl": 59, "in_alphabet": 59, "repeatedli": 59, "introduct": 59, "odd": 59, "vice": 59, "versa": 59, "attempt": 59, "u_2": 59, "u_3": 59, "aaaaa": 59, "omit": 59, "shown": 59, "both": 59, "output": 59, "necessarili": 59, "progress": 59, "determinist": 59, "reorder": 59, "occurr": 59, "substitut": 59, "lesser": 59, "along": 59, "print": 60, "disabl": 60, "goe": 60, "scope": 60, "file": 63, "silo": 63, "wilo": 63, "wislo": 63}, "objects": {"": [[36, 0, 1, "", "FroidurePin"], [51, 0, 1, "", "Konieczny"], [0, 0, 1, "", "PPerm"], [1, 0, 1, "", "Perm"], [58, 0, 1, "", "Presentation"], [2, 0, 1, "", "Transf"], [59, 4, 1, "", "add_identity_rules"], [59, 4, 1, "", "add_inverse_rules"], [59, 4, 1, "", "add_rule"], [59, 4, 1, "", "add_rule_and_check"], [59, 4, 1, "", "add_rules"], [59, 4, 1, "", "add_zero_rules"], [10, 4, 1, "", "alternating_group"], [59, 4, 1, "", "are_rules_sorted"], [10, 0, 1, "", "author"], [10, 4, 1, "", "brauer_monoid"], [59, 4, 1, "", "change_alphabet"], [59, 4, 1, "", "character"], [10, 4, 1, "", "chinese_monoid"], [10, 4, 1, "", "dual_symmetric_inverse_monoid"], [10, 4, 1, "", "fibonacci_semigroup"], [59, 4, 1, "", "first_unused_letter"], [10, 4, 1, "", "full_transformation_monoid"], [59, 4, 1, "", "greedy_reduce_length"], [59, 4, 1, "", "length"], [59, 4, 1, "", "letter"], [59, 4, 1, "", "longest_common_subword"], [59, 4, 1, "", "longest_rule"], [59, 4, 1, "", "longest_rule_length"], [59, 4, 1, "", "make"], [59, 4, 1, "", "make_semigroup"], [10, 4, 1, "", "monogenic_semigroup"], [59, 4, 1, "", "normalize_alphabet"], [10, 4, 1, "", "orientation_preserving_monoid"], [10, 4, 1, "", "orientation_reversing_monoid"], [10, 4, 1, "", "partial_transformation_monoid"], [10, 4, 1, "", "partition_monoid"], [10, 4, 1, "", "plactic_monoid"], [10, 4, 1, "", "rectangular_band"], [59, 4, 1, "", "reduce_complements"], [59, 4, 1, "", "redundant_rule"], [59, 4, 1, "", "remove_duplicate_rules"], [59, 4, 1, "", "remove_redundant_generators"], [59, 4, 1, "", "remove_trivial_rules"], [59, 4, 1, "", "replace_subword"], [59, 4, 1, "", "replace_word"], [59, 4, 1, "", "reverse"], [59, 4, 1, "", "shortest_rule"], [59, 4, 1, "", "shortest_rule_length"], [10, 4, 1, "", "singular_brauer_monoid"], [59, 4, 1, "", "sort_each_rule"], [59, 4, 1, "", "sort_rules"], [10, 4, 1, "", "stellar_monoid"], [10, 4, 1, "", "stylic_monoid"], [10, 4, 1, "", "symmetric_group"], [10, 4, 1, "", "symmetric_inverse_monoid"], [10, 4, 1, "", "temperley_lieb_monoid"], [10, 4, 1, "", "uniform_block_bijection_monoid"]], "FroidurePin": [[37, 1, 1, "", "__init__"], [30, 1, 1, "", "__iter__"], [34, 1, 1, "", "add_generator"], [34, 1, 1, "", "add_generators"], [30, 1, 1, "", "at"], [41, 1, 1, "", "batch_size"], [34, 1, 1, "", "closure"], [41, 1, 1, "", "concurrency_threshold"], [38, 1, 1, "", "contains"], [34, 1, 1, "", "copy_add_generators"], [34, 1, 1, "", "copy_closure"], [33, 1, 1, "", "current_length"], [33, 1, 1, "", "current_max_word_length"], [33, 1, 1, "", "current_number_of_rules"], [38, 1, 1, "", "current_position"], [30, 1, 1, "", "current_size"], [40, 1, 1, "", "dead"], [31, 1, 1, "", "degree"], [40, 1, 1, "", "enumerate"], [38, 1, 1, "", "equal_to"], [33, 1, 1, "", "factorisation"], [33, 1, 1, "", "fast_product"], [39, 1, 1, "", "final_letter"], [40, 1, 1, "", "finished"], [39, 1, 1, "", "first_letter"], [34, 1, 1, "", "generator"], [35, 1, 1, "", "idempotents"], [41, 1, 1, "", "immutable"], [31, 1, 1, "", "is_finite"], [35, 1, 1, "", "is_idempotent"], [31, 1, 1, "", "is_monoid"], [40, 1, 1, "", "kill"], [32, 1, 1, "", "left_cayley_graph"], [33, 1, 1, "", "length"], [41, 1, 1, "", "max_threads"], [33, 1, 1, "", "minimal_factorisation"], [34, 1, 1, "", "number_of_generators"], [35, 1, 1, "", "number_of_idempotents"], [33, 1, 1, "", "number_of_rules"], [38, 1, 1, "", "position"], [38, 1, 1, "", "position_to_sorted_position"], [39, 1, 1, "", "prefix"], [33, 1, 1, "", "product_by_reduction"], [40, 1, 1, "", "report"], [40, 1, 1, "", "report_every"], [40, 1, 1, "", "report_why_we_stopped"], [41, 1, 1, "", "reserve"], [32, 1, 1, "", "right_cayley_graph"], [33, 1, 1, "", "rules"], [40, 1, 1, "", "run"], [40, 1, 1, "", "run_for"], [40, 1, 1, "", "run_until"], [40, 1, 1, "", "running"], [30, 1, 1, "", "size"], [30, 1, 1, "", "sorted"], [30, 1, 1, "", "sorted_at"], [38, 1, 1, "", "sorted_position"], [40, 1, 1, "", "started"], [40, 1, 1, "", "stopped"], [40, 1, 1, "", "stopped_by_predicate"], [39, 1, 1, "", "suffix"], [40, 1, 1, "", "timed_out"], [33, 1, 1, "", "word_to_element"]], "Konieczny": [[46, 0, 1, "", "DClass"], [49, 1, 1, "", "D_class_of_element"], [49, 1, 1, "", "D_classes"], [53, 1, 1, "", "__contains__"], [52, 1, 1, "", "__init__"], [48, 1, 1, "", "add_generator"], [53, 1, 1, "", "contains"], [49, 1, 1, "", "current_number_of_D_classes"], [49, 1, 1, "", "current_number_of_H_classes"], [49, 1, 1, "", "current_number_of_L_classes"], [49, 1, 1, "", "current_number_of_R_classes"], [50, 1, 1, "", "current_number_of_idempotents"], [49, 1, 1, "", "current_number_of_regular_D_classes"], [49, 1, 1, "", "current_number_of_regular_L_classes"], [49, 1, 1, "", "current_number_of_regular_R_classes"], [45, 1, 1, "", "current_size"], [54, 1, 1, "", "dead"], [45, 1, 1, "", "degree"], [54, 1, 1, "", "finished"], [48, 1, 1, "", "generator"], [48, 1, 1, "", "generators"], [49, 1, 1, "", "is_regular_element"], [54, 1, 1, "", "kill"], [49, 1, 1, "", "number_of_D_classes"], [49, 1, 1, "", "number_of_H_classes"], [49, 1, 1, "", "number_of_L_classes"], [49, 1, 1, "", "number_of_R_classes"], [48, 1, 1, "", "number_of_generators"], [50, 1, 1, "", "number_of_idempotents"], [49, 1, 1, "", "number_of_regular_D_classes"], [49, 1, 1, "", "number_of_regular_L_classes"], [49, 1, 1, "", "number_of_regular_R_classes"], [49, 1, 1, "", "regular_D_classes"], [54, 1, 1, "", "report"], [54, 1, 1, "", "report_every"], [54, 1, 1, "", "report_why_we_stopped"], [54, 1, 1, "", "run"], [54, 1, 1, "", "run_for"], [54, 1, 1, "", "run_until"], [54, 1, 1, "", "running"], [45, 1, 1, "", "size"], [54, 1, 1, "", "started"], [54, 1, 1, "", "stopped"], [54, 1, 1, "", "stopped_by_predicate"], [54, 1, 1, "", "timed_out"]], "Konieczny.DClass": [[47, 1, 1, "", "contains"], [47, 1, 1, "", "is_regular_D_class"], [47, 1, 1, "", "number_of_L_classes"], [47, 1, 1, "", "number_of_R_classes"], [47, 1, 1, "", "number_of_idempotents"], [47, 1, 1, "", "rep"], [47, 1, 1, "", "size"], [47, 1, 1, "", "size_H_class"]], "PPerm": [[0, 1, 1, "", "__eq__"], [0, 1, 1, "", "__getitem__"], [0, 1, 1, "", "__lt__"], [0, 1, 1, "", "__mul__"], [0, 1, 1, "", "degree"], [0, 1, 1, "", "identity"], [0, 1, 1, "", "images"], [0, 1, 1, "", "inverse"], [0, 1, 1, "", "left_one"], [0, 1, 1, "", "make"], [0, 1, 1, "", "make_identity"], [0, 1, 1, "", "product_inplace"], [0, 1, 1, "", "rank"], [0, 1, 1, "", "right_one"], [0, 1, 1, "", "undef"]], "Perm": [[1, 1, 1, "", "__eq__"], [1, 1, 1, "", "__getitem__"], [1, 1, 1, "", "__lt__"], [1, 1, 1, "", "__mul__"], [1, 1, 1, "", "degree"], [1, 1, 1, "", "identity"], [1, 1, 1, "", "images"], [1, 1, 1, "", "inverse"], [1, 1, 1, "", "make"], [1, 1, 1, "", "make_identity"], [1, 1, 1, "", "product_inplace"], [1, 1, 1, "", "rank"]], "Presentation": [[58, 1, 1, "", "alphabet"], [58, 1, 1, "", "alphabet_from_rules"], [58, 1, 1, "", "contains_empty_word"], [58, 1, 1, "", "index"], [58, 1, 1, "", "letter"], [58, 2, 1, "", "rules"], [58, 1, 1, "", "validate"], [58, 1, 1, "", "validate_alphabet"], [58, 1, 1, "", "validate_letter"], [58, 1, 1, "", "validate_rules"]], "Transf": [[2, 1, 1, "", "__eq__"], [2, 1, 1, "", "__getitem__"], [2, 1, 1, "", "__lt__"], [2, 1, 1, "", "__mul__"], [2, 1, 1, "", "degree"], [2, 1, 1, "", "identity"], [2, 1, 1, "", "images"], [2, 1, 1, "", "make"], [2, 1, 1, "", "make_identity"], [2, 1, 1, "", "product_inplace"], [2, 1, 1, "", "rank"]], "_libsemigroups_pybind11": [[6, 0, 1, "libsemigroups_pybind11.ActionDigraph", "ActionDigraph"], [4, 0, 1, "libsemigroups_pybind11.BMat8", "BMat8"], [3, 0, 1, "libsemigroups_pybind11.Bipartition", "Bipartition"], [5, 0, 1, "libsemigroups_pybind11.Congruence", "Congruence"], [8, 0, 1, "libsemigroups_pybind11.Forest", "Forest"], [9, 0, 1, "libsemigroups_pybind11.FpSemigroup", "FpSemigroup"], [11, 0, 1, "libsemigroups_pybind11.Kambites", "Kambites"], [12, 0, 1, "libsemigroups_pybind11.KnuthBendix", "KnuthBendix"], [15, 0, 1, "libsemigroups_pybind11.PBR", "PBR"], [60, 0, 1, "libsemigroups_pybind11.ReportGuard", "ReportGuard"], [18, 0, 1, "libsemigroups_pybind11.Stephen", "Stephen"], [20, 0, 1, "libsemigroups_pybind11.ToddCoxeter", "ToddCoxeter"], [19, 4, 1, "libsemigroups_pybind11.accepts", "accepts"], [19, 4, 1, "libsemigroups_pybind11.is_left_factor", "is_left_factor"], [19, 4, 1, "libsemigroups_pybind11.left_factors", "left_factors"], [19, 4, 1, "libsemigroups_pybind11.number_of_left_factors", "number_of_left_factors"], [14, 4, 1, "libsemigroups_pybind11.number_of_words", "number_of_words"], [19, 4, 1, "libsemigroups_pybind11.number_of_words_accepted", "number_of_words_accepted"], [16, 4, 1, "libsemigroups_pybind11.silo", "silo"], [17, 4, 1, "libsemigroups_pybind11.sislo", "sislo"], [21, 4, 1, "libsemigroups_pybind11.wilo", "wilo"], [22, 4, 1, "libsemigroups_pybind11.wislo", "wislo"], [19, 4, 1, "libsemigroups_pybind11.words_accepted", "words_accepted"]], "_libsemigroups_pybind11.ActionDigraph": [[6, 1, 1, "libsemigroups_pybind11.ActionDigraph.add_edge", "add_edge"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.add_nodes", "add_nodes"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.add_to_out_degree", "add_to_out_degree"], [6, 0, 1, "libsemigroups_pybind11.ActionDigraph.algorithm", "algorithm"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.edges_iterator", "edges_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.neighbor", "neighbor"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.next_neighbor", "next_neighbor"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.nodes_iterator", "nodes_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.number_of_edges", "number_of_edges"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.number_of_nodes", "number_of_nodes"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.number_of_paths", "number_of_paths"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.number_of_paths_algorithm", "number_of_paths_algorithm"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.number_of_scc", "number_of_scc"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.out_degree", "out_degree"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.panilo_iterator", "panilo_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.panislo_iterator", "panislo_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.pilo_iterator", "pilo_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.pislo_iterator", "pislo_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.pstislo_iterator", "pstislo_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.random", "random"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.random_acyclic", "random_acyclic"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.reserve", "reserve"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.reverse_nodes_iterator", "reverse_nodes_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.reverse_spanning_forest", "reverse_spanning_forest"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.root_of_scc", "root_of_scc"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.scc_id", "scc_id"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.scc_iterator", "scc_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.scc_roots_iterator", "scc_roots_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.sccs_iterator", "sccs_iterator"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.spanning_forest", "spanning_forest"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.unsafe_neighbor", "unsafe_neighbor"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.unsafe_next_neighbor", "unsafe_next_neighbor"], [6, 1, 1, "libsemigroups_pybind11.ActionDigraph.validate", "validate"]], "_libsemigroups_pybind11.ActionDigraph.algorithm": [[6, 3, 1, "libsemigroups_pybind11.ActionDigraph.algorithm.name", "name"]], "_libsemigroups_pybind11.BMat8": [[4, 1, 1, "libsemigroups_pybind11.BMat8.col_space_basis", "col_space_basis"], [4, 1, 1, "libsemigroups_pybind11.BMat8.column_space_size", "column_space_size"], [4, 1, 1, "libsemigroups_pybind11.BMat8.get", "get"], [4, 1, 1, "libsemigroups_pybind11.BMat8.is_regular_element", "is_regular_element"], [4, 1, 1, "libsemigroups_pybind11.BMat8.minimum_dim", "minimum_dim"], [4, 1, 1, "libsemigroups_pybind11.BMat8.number_of_cols", "number_of_cols"], [4, 1, 1, "libsemigroups_pybind11.BMat8.number_of_rows", "number_of_rows"], [4, 1, 1, "libsemigroups_pybind11.BMat8.one", "one"], [4, 1, 1, "libsemigroups_pybind11.BMat8.random", "random"], [4, 1, 1, "libsemigroups_pybind11.BMat8.row_space_basis", "row_space_basis"], [4, 1, 1, "libsemigroups_pybind11.BMat8.row_space_size", "row_space_size"], [4, 1, 1, "libsemigroups_pybind11.BMat8.rows", "rows"], [4, 1, 1, "libsemigroups_pybind11.BMat8.set", "set"], [4, 1, 1, "libsemigroups_pybind11.BMat8.swap", "swap"], [4, 1, 1, "libsemigroups_pybind11.BMat8.to_int", "to_int"], [4, 1, 1, "libsemigroups_pybind11.BMat8.transpose", "transpose"]], "_libsemigroups_pybind11.Bipartition": [[3, 1, 1, "libsemigroups_pybind11.Bipartition.__eq__", "__eq__"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.__getitem__", "__getitem__"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.__lt__", "__lt__"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.__mul__", "__mul__"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.degree", "degree"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.identity", "identity"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.is_transverse_block", "is_transverse_block"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.left_blocks", "left_blocks"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.lookup", "lookup"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.make", "make"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.make_identity", "make_identity"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.number_of_blocks", "number_of_blocks"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.number_of_left_blocks", "number_of_left_blocks"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.number_of_right_blocks", "number_of_right_blocks"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.product_inplace", "product_inplace"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.rank", "rank"], [3, 1, 1, "libsemigroups_pybind11.Bipartition.right_blocks", "right_blocks"]], "_libsemigroups_pybind11.Congruence": [[5, 1, 1, "libsemigroups_pybind11.Congruence.add_pair", "add_pair"], [5, 1, 1, "libsemigroups_pybind11.Congruence.class_index_to_word", "class_index_to_word"], [5, 1, 1, "libsemigroups_pybind11.Congruence.const_contains", "const_contains"], [5, 1, 1, "libsemigroups_pybind11.Congruence.contains", "contains"], [5, 1, 1, "libsemigroups_pybind11.Congruence.dead", "dead"], [5, 1, 1, "libsemigroups_pybind11.Congruence.finished", "finished"], [5, 1, 1, "libsemigroups_pybind11.Congruence.generating_pairs", "generating_pairs"], [5, 1, 1, "libsemigroups_pybind11.Congruence.has_knuth_bendix", "has_knuth_bendix"], [5, 1, 1, "libsemigroups_pybind11.Congruence.has_parent_froidure_pin", "has_parent_froidure_pin"], [5, 1, 1, "libsemigroups_pybind11.Congruence.has_quotient_froidure_pin", "has_quotient_froidure_pin"], [5, 1, 1, "libsemigroups_pybind11.Congruence.has_todd_coxeter", "has_todd_coxeter"], [5, 1, 1, "libsemigroups_pybind11.Congruence.is_quotient_obviously_finite", "is_quotient_obviously_finite"], [5, 1, 1, "libsemigroups_pybind11.Congruence.is_quotient_obviously_infinite", "is_quotient_obviously_infinite"], [5, 1, 1, "libsemigroups_pybind11.Congruence.kill", "kill"], [5, 1, 1, "libsemigroups_pybind11.Congruence.kind", "kind"], [5, 1, 1, "libsemigroups_pybind11.Congruence.knuth_bendix", "knuth_bendix"], [5, 1, 1, "libsemigroups_pybind11.Congruence.less", "less"], [5, 1, 1, "libsemigroups_pybind11.Congruence.non_trivial_classes", "non_trivial_classes"], [5, 1, 1, "libsemigroups_pybind11.Congruence.number_of_classes", "number_of_classes"], [5, 1, 1, "libsemigroups_pybind11.Congruence.number_of_generating_pairs", "number_of_generating_pairs"], [5, 1, 1, "libsemigroups_pybind11.Congruence.number_of_generators", "number_of_generators"], [5, 1, 1, "libsemigroups_pybind11.Congruence.number_of_non_trivial_classes", "number_of_non_trivial_classes"], [5, 1, 1, "libsemigroups_pybind11.Congruence.parent_froidure_pin", "parent_froidure_pin"], [5, 1, 1, "libsemigroups_pybind11.Congruence.quotient_froidure_pin", "quotient_froidure_pin"], [5, 1, 1, "libsemigroups_pybind11.Congruence.report", "report"], [5, 1, 1, "libsemigroups_pybind11.Congruence.report_every", "report_every"], [5, 1, 1, "libsemigroups_pybind11.Congruence.report_why_we_stopped", "report_why_we_stopped"], [5, 1, 1, "libsemigroups_pybind11.Congruence.run", "run"], [5, 1, 1, "libsemigroups_pybind11.Congruence.run_for", "run_for"], [5, 1, 1, "libsemigroups_pybind11.Congruence.run_until", "run_until"], [5, 1, 1, "libsemigroups_pybind11.Congruence.set_number_of_generators", "set_number_of_generators"], [5, 1, 1, "libsemigroups_pybind11.Congruence.stopped_by_predicate", "stopped_by_predicate"], [5, 1, 1, "libsemigroups_pybind11.Congruence.timed_out", "timed_out"], [5, 1, 1, "libsemigroups_pybind11.Congruence.todd_coxeter", "todd_coxeter"], [5, 1, 1, "libsemigroups_pybind11.Congruence.word_to_class_index", "word_to_class_index"]], "_libsemigroups_pybind11.Forest": [[8, 1, 1, "libsemigroups_pybind11.Forest.add_nodes", "add_nodes"], [8, 1, 1, "libsemigroups_pybind11.Forest.clear", "clear"], [8, 1, 1, "libsemigroups_pybind11.Forest.label", "label"], [8, 1, 1, "libsemigroups_pybind11.Forest.number_of_nodes", "number_of_nodes"], [8, 1, 1, "libsemigroups_pybind11.Forest.parent", "parent"], [8, 1, 1, "libsemigroups_pybind11.Forest.parent_iterator", "parent_iterator"], [8, 1, 1, "libsemigroups_pybind11.Forest.set", "set"]], "_libsemigroups_pybind11.FpSemigroup": [[9, 1, 1, "libsemigroups_pybind11.FpSemigroup.add_rule", "add_rule"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.add_rules", "add_rules"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.alphabet", "alphabet"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.char_to_uint", "char_to_uint"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.dead", "dead"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.equal_to", "equal_to"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.finished", "finished"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.froidure_pin", "froidure_pin"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.has_froidure_pin", "has_froidure_pin"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.has_knuth_bendix", "has_knuth_bendix"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.has_todd_coxeter", "has_todd_coxeter"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.identity", "identity"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.inverses", "inverses"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.is_obviously_finite", "is_obviously_finite"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.is_obviously_infinite", "is_obviously_infinite"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.kill", "kill"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.knuth_bendix", "knuth_bendix"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.normal_form", "normal_form"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.number_of_rules", "number_of_rules"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.report", "report"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.report_every", "report_every"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.report_why_we_stopped", "report_why_we_stopped"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.rules", "rules"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.run", "run"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.run_for", "run_for"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.run_until", "run_until"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.running", "running"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.set_alphabet", "set_alphabet"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.set_identity", "set_identity"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.set_inverses", "set_inverses"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.size", "size"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.started", "started"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.stopped", "stopped"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.stopped_by_predicate", "stopped_by_predicate"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.string_to_word", "string_to_word"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.timed_out", "timed_out"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.to_gap_string", "to_gap_string"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.todd_coxeter", "todd_coxeter"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.uint_to_char", "uint_to_char"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.validate_letter", "validate_letter"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.validate_word", "validate_word"], [9, 1, 1, "libsemigroups_pybind11.FpSemigroup.word_to_string", "word_to_string"]], "_libsemigroups_pybind11.Kambites": [[11, 1, 1, "libsemigroups_pybind11.Kambites.add_rule", "add_rule"], [11, 1, 1, "libsemigroups_pybind11.Kambites.add_rules", "add_rules"], [11, 1, 1, "libsemigroups_pybind11.Kambites.alphabet", "alphabet"], [11, 1, 1, "libsemigroups_pybind11.Kambites.char_to_uint", "char_to_uint"], [11, 1, 1, "libsemigroups_pybind11.Kambites.dead", "dead"], [11, 1, 1, "libsemigroups_pybind11.Kambites.equal_to", "equal_to"], [11, 1, 1, "libsemigroups_pybind11.Kambites.finished", "finished"], [11, 1, 1, "libsemigroups_pybind11.Kambites.froidure_pin", "froidure_pin"], [11, 1, 1, "libsemigroups_pybind11.Kambites.has_froidure_pin", "has_froidure_pin"], [11, 1, 1, "libsemigroups_pybind11.Kambites.has_identity", "has_identity"], [11, 1, 1, "libsemigroups_pybind11.Kambites.identity", "identity"], [11, 1, 1, "libsemigroups_pybind11.Kambites.inverses", "inverses"], [11, 1, 1, "libsemigroups_pybind11.Kambites.is_obviously_finite", "is_obviously_finite"], [11, 1, 1, "libsemigroups_pybind11.Kambites.is_obviously_infinite", "is_obviously_infinite"], [11, 1, 1, "libsemigroups_pybind11.Kambites.kill", "kill"], [11, 1, 1, "libsemigroups_pybind11.Kambites.normal_form", "normal_form"], [11, 1, 1, "libsemigroups_pybind11.Kambites.number_of_normal_forms", "number_of_normal_forms"], [11, 1, 1, "libsemigroups_pybind11.Kambites.number_of_pieces", "number_of_pieces"], [11, 1, 1, "libsemigroups_pybind11.Kambites.number_of_rules", "number_of_rules"], [11, 1, 1, "libsemigroups_pybind11.Kambites.report", "report"], [11, 1, 1, "libsemigroups_pybind11.Kambites.report_every", "report_every"], [11, 1, 1, "libsemigroups_pybind11.Kambites.report_why_we_stopped", "report_why_we_stopped"], [11, 1, 1, "libsemigroups_pybind11.Kambites.rules", "rules"], [11, 1, 1, "libsemigroups_pybind11.Kambites.run", "run"], [11, 1, 1, "libsemigroups_pybind11.Kambites.run_for", "run_for"], [11, 1, 1, "libsemigroups_pybind11.Kambites.run_until", "run_until"], [11, 1, 1, "libsemigroups_pybind11.Kambites.running", "running"], [11, 1, 1, "libsemigroups_pybind11.Kambites.set_alphabet", "set_alphabet"], [11, 1, 1, "libsemigroups_pybind11.Kambites.set_identity", "set_identity"], [11, 1, 1, "libsemigroups_pybind11.Kambites.set_inverses", "set_inverses"], [11, 1, 1, "libsemigroups_pybind11.Kambites.size", "size"], [11, 1, 1, "libsemigroups_pybind11.Kambites.small_overlap_class", "small_overlap_class"], [11, 1, 1, "libsemigroups_pybind11.Kambites.started", "started"], [11, 1, 1, "libsemigroups_pybind11.Kambites.stopped", "stopped"], [11, 1, 1, "libsemigroups_pybind11.Kambites.stopped_by_predicate", "stopped_by_predicate"], [11, 1, 1, "libsemigroups_pybind11.Kambites.string_to_word", "string_to_word"], [11, 1, 1, "libsemigroups_pybind11.Kambites.timed_out", "timed_out"], [11, 1, 1, "libsemigroups_pybind11.Kambites.uint_to_char", "uint_to_char"], [11, 1, 1, "libsemigroups_pybind11.Kambites.validate_letter", "validate_letter"], [11, 1, 1, "libsemigroups_pybind11.Kambites.validate_word", "validate_word"], [11, 1, 1, "libsemigroups_pybind11.Kambites.word_to_string", "word_to_string"]], "_libsemigroups_pybind11.KnuthBendix": [[12, 1, 1, "libsemigroups_pybind11.KnuthBendix.active_rules", "active_rules"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.add_rule", "add_rule"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.add_rules", "add_rules"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.alphabet", "alphabet"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.char_to_uint", "char_to_uint"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.check_confluence_interval", "check_confluence_interval"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.confluent", "confluent"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.contains_empty_string", "contains_empty_string"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.dead", "dead"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.equal_to", "equal_to"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.finished", "finished"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.froidure_pin", "froidure_pin"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.gilman_digraph", "gilman_digraph"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.has_froidure_pin", "has_froidure_pin"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.identity", "identity"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.inverses", "inverses"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.is_obviously_finite", "is_obviously_finite"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.is_obviously_infinite", "is_obviously_infinite"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.kill", "kill"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.knuth_bendix_by_overlap_length", "knuth_bendix_by_overlap_length"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.max_overlap", "max_overlap"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.max_rules", "max_rules"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.normal_form", "normal_form"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.normal_forms", "normal_forms"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.normal_forms_alphabet", "normal_forms_alphabet"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.number_of_active_rules", "number_of_active_rules"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.number_of_normal_forms", "number_of_normal_forms"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.number_of_rules", "number_of_rules"], [12, 0, 1, "libsemigroups_pybind11.KnuthBendix.overlap", "overlap"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.overlap_policy", "overlap_policy"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.report", "report"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.report_every", "report_every"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.report_why_we_stopped", "report_why_we_stopped"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.rewrite", "rewrite"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.rules", "rules"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.run", "run"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.run_for", "run_for"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.run_until", "run_until"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.running", "running"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.set_alphabet", "set_alphabet"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.set_identity", "set_identity"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.set_inverses", "set_inverses"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.size", "size"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.started", "started"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.stopped", "stopped"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.stopped_by_predicate", "stopped_by_predicate"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.string_to_word", "string_to_word"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.timed_out", "timed_out"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.to_gap_string", "to_gap_string"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.uint_to_char", "uint_to_char"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.validate_letter", "validate_letter"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.validate_word", "validate_word"], [12, 1, 1, "libsemigroups_pybind11.KnuthBendix.word_to_string", "word_to_string"]], "_libsemigroups_pybind11.KnuthBendix.overlap": [[12, 3, 1, "libsemigroups_pybind11.KnuthBendix.overlap.name", "name"]], "_libsemigroups_pybind11.PBR": [[15, 1, 1, "libsemigroups_pybind11.PBR.__eq__", "__eq__"], [15, 1, 1, "libsemigroups_pybind11.PBR.__getitem__", "__getitem__"], [15, 1, 1, "libsemigroups_pybind11.PBR.__lt__", "__lt__"], [15, 1, 1, "libsemigroups_pybind11.PBR.__mul__", "__mul__"], [15, 1, 1, "libsemigroups_pybind11.PBR.degree", "degree"], [15, 1, 1, "libsemigroups_pybind11.PBR.identity", "identity"], [15, 1, 1, "libsemigroups_pybind11.PBR.make", "make"], [15, 1, 1, "libsemigroups_pybind11.PBR.make_identity", "make_identity"], [15, 1, 1, "libsemigroups_pybind11.PBR.product_inplace", "product_inplace"]], "_libsemigroups_pybind11.Stephen": [[18, 1, 1, "libsemigroups_pybind11.Stephen.accept_state", "accept_state"], [18, 1, 1, "libsemigroups_pybind11.Stephen.dead", "dead"], [18, 1, 1, "libsemigroups_pybind11.Stephen.finished", "finished"], [18, 1, 1, "libsemigroups_pybind11.Stephen.init", "init"], [18, 1, 1, "libsemigroups_pybind11.Stephen.kill", "kill"], [18, 1, 1, "libsemigroups_pybind11.Stephen.presentation", "presentation"], [18, 1, 1, "libsemigroups_pybind11.Stephen.report", "report"], [18, 1, 1, "libsemigroups_pybind11.Stephen.report_every", "report_every"], [18, 1, 1, "libsemigroups_pybind11.Stephen.report_why_we_stopped", "report_why_we_stopped"], [18, 1, 1, "libsemigroups_pybind11.Stephen.run", "run"], [18, 1, 1, "libsemigroups_pybind11.Stephen.run_for", "run_for"], [18, 1, 1, "libsemigroups_pybind11.Stephen.run_until", "run_until"], [18, 1, 1, "libsemigroups_pybind11.Stephen.running", "running"], [18, 1, 1, "libsemigroups_pybind11.Stephen.set_word", "set_word"], [18, 1, 1, "libsemigroups_pybind11.Stephen.started", "started"], [18, 1, 1, "libsemigroups_pybind11.Stephen.stopped", "stopped"], [18, 1, 1, "libsemigroups_pybind11.Stephen.stopped_by_predicate", "stopped_by_predicate"], [18, 1, 1, "libsemigroups_pybind11.Stephen.timed_out", "timed_out"], [18, 1, 1, "libsemigroups_pybind11.Stephen.word", "word"], [18, 1, 1, "libsemigroups_pybind11.Stephen.word_graph", "word_graph"]], "_libsemigroups_pybind11.ToddCoxeter": [[20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.add_pair", "add_pair"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.class_index_to_word", "class_index_to_word"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.compatible", "compatible"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.complete", "complete"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.const_contains", "const_contains"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.contains", "contains"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.dead", "dead"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.empty", "empty"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.finished", "finished"], [20, 0, 1, "libsemigroups_pybind11.ToddCoxeter.froidure_pin_options", "froidure_pin_options"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.froidure_pin_policy", "froidure_pin_policy"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.generating_pairs", "generating_pairs"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.has_parent_froidure_pin", "has_parent_froidure_pin"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.has_quotient_froidure_pin", "has_quotient_froidure_pin"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.is_quotient_obviously_finite", "is_quotient_obviously_finite"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.is_quotient_obviously_infinite", "is_quotient_obviously_infinite"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.is_standardized", "is_standardized"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.kill", "kill"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.kind", "kind"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.less", "less"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.lookahead", "lookahead"], [20, 0, 1, "libsemigroups_pybind11.ToddCoxeter.lookahead_options", "lookahead_options"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.lower_bound", "lower_bound"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.next_lookahead", "next_lookahead"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.non_trivial_classes", "non_trivial_classes"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.normal_forms", "normal_forms"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.number_of_classes", "number_of_classes"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.number_of_generating_pairs", "number_of_generating_pairs"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.number_of_generators", "number_of_generators"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.number_of_non_trivial_classes", "number_of_non_trivial_classes"], [20, 0, 1, "libsemigroups_pybind11.ToddCoxeter.order", "order"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.parent_froidure_pin", "parent_froidure_pin"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.quotient_froidure_pin", "quotient_froidure_pin"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.random_interval", "random_interval"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.random_shuffle_generating_pairs", "random_shuffle_generating_pairs"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.report", "report"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.report_every", "report_every"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.report_why_we_stopped", "report_why_we_stopped"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.reserve", "reserve"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.run", "run"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.run_for", "run_for"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.run_until", "run_until"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.save", "save"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.set_number_of_generators", "set_number_of_generators"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.shrink_to_fit", "shrink_to_fit"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.sort_generating_pairs", "sort_generating_pairs"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.standardize", "standardize"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.stopped_by_predicate", "stopped_by_predicate"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.strategy", "strategy"], [20, 0, 1, "libsemigroups_pybind11.ToddCoxeter.strategy_options", "strategy_options"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.timed_out", "timed_out"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.to_gap_string", "to_gap_string"], [20, 1, 1, "libsemigroups_pybind11.ToddCoxeter.word_to_class_index", "word_to_class_index"]], "_libsemigroups_pybind11.ToddCoxeter.froidure_pin_options": [[20, 3, 1, "libsemigroups_pybind11.ToddCoxeter.froidure_pin_options.name", "name"]], "_libsemigroups_pybind11.ToddCoxeter.lookahead_options": [[20, 3, 1, "libsemigroups_pybind11.ToddCoxeter.lookahead_options.name", "name"]], "_libsemigroups_pybind11.ToddCoxeter.order": [[20, 3, 1, "libsemigroups_pybind11.ToddCoxeter.order.name", "name"]], "_libsemigroups_pybind11.ToddCoxeter.strategy_options": [[20, 3, 1, "libsemigroups_pybind11.ToddCoxeter.strategy_options.name", "name"]], "libsemigroups_pybind11": [[13, 0, 1, "", "Matrix"], [13, 0, 1, "", "MatrixKind"], [26, 0, 1, "", "congruence_kind"], [13, 4, 1, "", "make"], [13, 4, 1, "", "make_identity"]], "libsemigroups_pybind11.Matrix": [[13, 1, 1, "", "__eq__"], [13, 1, 1, "", "__getitem__"], [13, 1, 1, "", "__iadd__"], [13, 1, 1, "", "__imul__"], [13, 1, 1, "", "__init__"], [13, 1, 1, "", "__lt__"], [13, 1, 1, "", "__mul__"], [13, 1, 1, "", "number_of_cols"], [13, 1, 1, "", "number_of_rows"], [13, 1, 1, "", "one"], [13, 1, 1, "", "product_inplace"], [13, 1, 1, "", "row"], [13, 1, 1, "", "rows"], [13, 1, 1, "", "swap"], [13, 1, 1, "", "transpose"]], "libsemigroups_pybind11.MatrixKind": [[13, 2, 1, "", "Boolean"], [13, 2, 1, "", "Integer"], [13, 2, 1, "", "MaxPlus"], [13, 2, 1, "", "MaxPlusTrunc"], [13, 2, 1, "", "MinPlus"], [13, 2, 1, "", "MinPlusTrunc"], [13, 2, 1, "", "NTP"], [13, 2, 1, "", "ProjMaxPlus"]], "libsemigroups_pybind11.action_digraph_helper": [[7, 4, 1, "", "add_cycle"], [7, 4, 1, "", "dot"], [7, 4, 1, "", "follow_path"], [7, 4, 1, "", "is_acyclic"], [7, 4, 1, "", "make"], [7, 4, 1, "", "out_neighbors"], [7, 4, 1, "", "topological_sort"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"partial": 0, "perm": 0, "permut": 1, "transform": 2, "bipartit": 3, "bmat8": 4, "congruenc": [5, 26], "exampl": [5, 10], "actiondigraph": [6, 7], "helper": [7, 19, 59], "function": [7, 13, 63], "forest": 8, "fpsemigroup": 9, "full": [10, 19, 58, 59], "api": [10, 19, 58, 59], "kambit": 11, "knuth": 12, "bendix": 12, "matrix": [13, 55], "matrixkind": 13, "The": 13, "class": 13, "addit": 13, "number": 14, "word": [14, 21, 22, 63], "pbr": 15, "string": [16, 17], "lexicograph": [16, 21], "order": [16, 17, 21, 22], "silo": 16, "short": [17, 22], "lex": [17, 22], "sislo": 17, "stephen": [18, 19, 62], "method": [18, 46, 47], "inherit": 18, "from": [18, 43], "runner": 18, "content": [19, 58, 59], "todd": 20, "coxet": 20, "wilo": 21, "wislo": 22, "author": 23, "contributor": 23, "bibliographi": 24, "changelog": 25, "v0": 25, "8": [25, 42], "0": [25, 42], "releas": [25, 43], "28": 25, "02": 25, "2023": 25, "7": 25, "3": 25, "07": 25, "2": 25, "12": 25, "01": 25, "1": 25, "11": 25, "15": 25, "2022": 25, "6": 25, "5": 25, "16": 25, "4": 25, "09": 25, "10": 25, "04": 25, "29": 25, "27": 25, "2021": 25, "08": 25, "24": 25, "digraph": 27, "element": 28, "finit": [29, 62], "present": [29, 57, 58, 59, 62], "semigroup": [29, 61, 62], "accessor": [30, 36], "attribut": [31, 36, 45, 51], "caylei": [32, 36], "graph": [32, 36], "factoris": [33, 36], "product": [33, 36], "relat": [33, 36, 49, 51], "gener": [34, 36, 48, 51], "idempot": [35, 36, 50, 51], "froidurepin": 36, "constructor": [36, 37, 51, 52], "set": [36, 41], "membership": [36, 38, 51, 53], "comparison": [36, 38], "prefix": [36, 39], "suffix": [36, 39], "run": [36, 40, 51, 54], "report": [36, 40, 51, 54], "libsemigroups_pybind11": 42, "version": 42, "python": 42, "bind": 42, "c": 42, "librari": 42, "libsemigroup": 42, "what": 42, "i": 42, "how": 42, "us": 42, "further": 42, "info": 42, "instal": 43, "pip": 43, "conda": 43, "sourc": 43, "archiv": 43, "build": 43, "document": 43, "issu": 43, "konieczni": [44, 46, 51], "dclass": 46, "green": [49, 51], "": [49, 51, 62], "miscellan": 56, "reportguard": 60, "procedur": 62}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 7, "sphinx": 57}, "alltitles": {"Partial perms": [[0, "partial-perms"]], "Permutations": [[1, "permutations"]], "Transformations": [[2, "transformations"]], "Bipartition": [[3, "bipartition"]], "BMat8": [[4, "bmat8"]], "Congruence": [[5, "congruence"]], "Example": [[5, "example"]], "ActionDigraph": [[6, "actiondigraph"]], "Helper functions for ActionDigraph": [[7, "helper-functions-for-actiondigraph"]], "Forest": [[8, "forest"]], "FpSemigroup": [[9, "fpsemigroup"]], "Examples": [[10, "examples"]], "Full API": [[10, "full-api"], [19, "full-api"], [58, "full-api"], [59, "full-api"]], "Kambites": [[11, "kambites"]], "Knuth-Bendix": [[12, "knuth-bendix"]], "Matrix": [[13, "matrix"], [55, "matrix"]], "MatrixKind": [[13, "matrixkind"]], "The Matrix class": [[13, "the-matrix-class"]], "Additional functionality": [[13, "additional-functionality"]], "Number of words": [[14, "number-of-words"]], "PBR": [[15, "pbr"]], "Strings in lexicographic order (silo)": [[16, "strings-in-lexicographic-order-silo"]], "Strings in short-lex order (sislo)": [[17, "strings-in-short-lex-order-sislo"]], "Stephen": [[18, "stephen"]], "Methods": [[18, "methods"], [46, "methods"], [47, "methods"]], "Methods inherited from Runner": [[18, "methods-inherited-from-runner"]], "Stephen helpers": [[19, "stephen-helpers"]], "Contents": [[19, "contents"], [58, "contents"], [59, "contents"]], "Todd-Coxeter": [[20, "todd-coxeter"]], "Words in lexicographic order (wilo)": [[21, "words-in-lexicographic-order-wilo"]], "Words in short-lex order (wislo)": [[22, "words-in-short-lex-order-wislo"]], "Authors": [[23, "authors"]], "Contributors": [[23, "contributors"]], "Bibliography": [[24, "bibliography"]], "Changelog": [[25, "changelog"]], "v0.8.0 (released 28/02/2023)": [[25, "v0-8-0-released-28-02-2023"]], "v0.7.3 (released 07/02/2023)": [[25, "v0-7-3-released-07-02-2023"]], "v0.7.2 (released 12/01/2023)": [[25, "v0-7-2-released-12-01-2023"]], "v0.7.1 (released 11/01/2023)": [[25, "v0-7-1-released-11-01-2023"]], "v0.7.0 (released 15/12/2022)": [[25, "v0-7-0-released-15-12-2022"]], "v0.6.0 (released 02/12/2022)": [[25, "v0-6-0-released-02-12-2022"]], "v0.5.0 (released 16/11/2022)": [[25, "v0-5-0-released-16-11-2022"]], "v0.4.3 (released 09/11/2022)": [[25, "v0-4-3-released-09-11-2022"]], "v0.4.2 (released 28/10/2022)": [[25, "v0-4-2-released-28-10-2022"]], "v0.4.1 (released 11/10/2022)": [[25, "v0-4-1-released-11-10-2022"]], "v0.4.0 (released 04/10/2022)": [[25, "v0-4-0-released-04-10-2022"]], "v0.3.0 (released 29/09/2022)": [[25, "v0-3-0-released-29-09-2022"]], "v0.2.2 (released 16/09/2022)": [[25, "v0-2-2-released-16-09-2022"]], "v0.2.1 (released 12/09/2022)": [[25, "v0-2-1-released-12-09-2022"]], "v0.2.0 (released 10/09/2022)": [[25, "v0-2-0-released-10-09-2022"]], "v0.1.8 (released 27/01/2022)": [[25, "v0-1-8-released-27-01-2022"]], "v0.1.7 (released 27/01/2022)": [[25, "v0-1-7-released-27-01-2022"]], "v0.1.6 (released 02/12/2021)": [[25, "v0-1-6-released-02-12-2021"]], "v0.1.5 (released 02/12/2021)": [[25, "v0-1-5-released-02-12-2021"]], "v0.1.4 (released 12/11/2021)": [[25, "v0-1-4-released-12-11-2021"]], "v0.1.3 (released 11/11/2021)": [[25, "v0-1-3-released-11-11-2021"]], "v0.1.2 (released 11/11/2021)": [[25, "v0-1-2-released-11-11-2021"]], "v0.1.1 (released 08/10/2021)": [[25, "v0-1-1-released-08-10-2021"]], "v0.1.0 (released 08/10/2021)": [[25, "v0-1-0-released-08-10-2021"]], "v0.0.0 (released 24/09/2021)": [[25, "v0-0-0-released-24-09-2021"]], "Congruences": [[26, "congruences"]], "Digraphs": [[27, "digraphs"]], "Elements": [[28, "elements"]], "Finitely presented semigroups": [[29, "finitely-presented-semigroups"]], "Accessors": [[30, "accessors"], [36, "accessors"]], "Attributes": [[31, "attributes"], [36, "attributes"], [45, "attributes"], [51, "attributes"]], "Cayley graphs": [[32, "cayley-graphs"], [36, "cayley-graphs"]], "Factorisation, products, and relations": [[33, "factorisation-products-and-relations"], [36, "factorisation-products-and-relations"]], "Generators": [[34, "generators"], [36, "generators"], [48, "generators"], [51, "generators"]], "Idempotents": [[35, "idempotents"], [36, "idempotents"], [50, "idempotents"], [51, "idempotents"]], "FroidurePin": [[36, "froidurepin"]], "Constructors": [[36, "constructors"], [37, "constructors"], [51, "constructors"], [52, "constructors"]], "Settings": [[36, "settings"], [41, "settings"]], "Membership + comparison": [[36, "membership-comparison"], [38, "membership-comparison"]], "Prefixes and suffixes": [[36, "prefixes-and-suffixes"], [39, "prefixes-and-suffixes"]], "Running and reporting": [[36, "running-and-reporting"], [40, "running-and-reporting"], [51, "running-and-reporting"], [54, "running-and-reporting"]], "libsemigroups_pybind11 - Version 0.8.0": [[42, "libsemigroups-pybind11-version-0-8-0"]], "python bindings for the C++ library libsemigroups": [[42, "python-bindings-for-the-c-library-libsemigroups"]], "What is libsemigroups?": [[42, "what-is-libsemigroups"]], "How to use it": [[42, "how-to-use-it"]], "Further info": [[42, null]], "Installation": [[43, "installation"]], "Installing with pip": [[43, "installing-with-pip"]], "Installing with conda": [[43, "installing-with-conda"]], "From the sources": [[43, "from-the-sources"]], "From a release archive": [[43, "from-a-release-archive"]], "Building the documentation": [[43, "building-the-documentation"]], "Issues": [[43, "issues"]], "Konieczny": [[44, "konieczny"], [51, "konieczny"]], "Konieczny.DClass": [[46, "konieczny-dclass"]], "Green's relations": [[49, "green-s-relations"], [51, "green-s-relations"]], "Membership": [[51, "membership"], [53, "membership"]], "Miscellaneous": [[56, "miscellaneous"]], "Presentations": [[57, "presentations"]], "Presentation": [[58, "presentation"]], "Presentation helpers": [[59, "presentation-helpers"]], "ReportGuard": [[60, "reportguard"]], "Semigroups": [[61, "semigroups"]], "Stephen's procedure for finitely presented semigroups": [[62, "stephen-s-procedure-for-finitely-presented-semigroups"]], "Words": [[63, "words"]], "Functions": [[63, "functions"]]}, "indexentries": {"pperm (built-in class)": [[0, "PPerm"]], "__eq__() (pperm method)": [[0, "PPerm.__eq__"]], "__getitem__() (pperm method)": [[0, "PPerm.__getitem__"]], "__lt__() (pperm method)": [[0, "PPerm.__lt__"]], "__mul__() (pperm method)": [[0, "PPerm.__mul__"]], "degree() (pperm method)": [[0, "PPerm.degree"]], "identity() (pperm method)": [[0, "PPerm.identity"]], "images() (pperm method)": [[0, "PPerm.images"]], "inverse() (pperm method)": [[0, "PPerm.inverse"]], "left_one() (pperm method)": [[0, "PPerm.left_one"]], "make() (pperm static method)": [[0, "PPerm.make"]], "make_identity() (pperm static method)": [[0, "PPerm.make_identity"]], "product_inplace() (pperm method)": [[0, "PPerm.product_inplace"]], "rank() (pperm method)": [[0, "PPerm.rank"]], "right_one() (pperm method)": [[0, "PPerm.right_one"]], "undef() (pperm method)": [[0, "PPerm.undef"]], "perm (built-in class)": [[1, "Perm"]], "__eq__() (perm method)": [[1, "Perm.__eq__"]], "__getitem__() (perm method)": [[1, "Perm.__getitem__"]], "__lt__() (perm method)": [[1, "Perm.__lt__"]], "__mul__() (perm method)": [[1, "Perm.__mul__"]], "degree() (perm method)": [[1, "Perm.degree"]], "identity() (perm method)": [[1, "Perm.identity"]], "images() (perm method)": [[1, "Perm.images"]], "inverse() (perm method)": [[1, "Perm.inverse"]], "make() (perm static method)": [[1, "Perm.make"]], "make_identity() (perm static method)": [[1, "Perm.make_identity"]], "product_inplace() (perm method)": [[1, "Perm.product_inplace"]], "rank() (perm method)": [[1, "Perm.rank"]], "transf (built-in class)": [[2, "Transf"]], "__eq__() (transf method)": [[2, "Transf.__eq__"]], "__getitem__() (transf method)": [[2, "Transf.__getitem__"]], "__lt__() (transf method)": [[2, "Transf.__lt__"]], "__mul__() (transf method)": [[2, "Transf.__mul__"]], "degree() (transf method)": [[2, "Transf.degree"]], "identity() (transf method)": [[2, "Transf.identity"]], "images() (transf method)": [[2, "Transf.images"]], "make() (transf static method)": [[2, "Transf.make"]], "make_identity() (transf static method)": [[2, "Transf.make_identity"]], "product_inplace() (transf method)": [[2, "Transf.product_inplace"]], "rank() (transf method)": [[2, "Transf.rank"]], "bipartition (class in _libsemigroups_pybind11)": [[3, "libsemigroups_pybind11.Bipartition"]], "__eq__() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.__eq__"]], "__getitem__() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.__getitem__"]], "__lt__() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.__lt__"]], "__mul__() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.__mul__"]], "degree() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.degree"]], "identity() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.identity"]], "is_transverse_block() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.is_transverse_block"]], "left_blocks() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.left_blocks"]], "lookup() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.lookup"]], "make() (bipartition static method)": [[3, "libsemigroups_pybind11.Bipartition.make"]], "make_identity() (bipartition static method)": [[3, "libsemigroups_pybind11.Bipartition.make_identity"]], "number_of_blocks() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.number_of_blocks"]], "number_of_left_blocks() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.number_of_left_blocks"]], "number_of_right_blocks() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.number_of_right_blocks"]], "product_inplace() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.product_inplace"]], "rank() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.rank"]], "right_blocks() (bipartition method)": [[3, "libsemigroups_pybind11.Bipartition.right_blocks"]], "bmat8 (class in _libsemigroups_pybind11)": [[4, "libsemigroups_pybind11.BMat8"]], "col_space_basis() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.col_space_basis"]], "column_space_size() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.column_space_size"]], "get() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.get"]], "is_regular_element() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.is_regular_element"]], "minimum_dim() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.minimum_dim"]], "number_of_cols() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.number_of_cols"]], "number_of_rows() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.number_of_rows"]], "one() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.one"]], "random() (bmat8 static method)": [[4, "libsemigroups_pybind11.BMat8.random"]], "row_space_basis() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.row_space_basis"]], "row_space_size() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.row_space_size"]], "rows() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.rows"]], "set() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.set"]], "swap() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.swap"]], "to_int() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.to_int"]], "transpose() (bmat8 method)": [[4, "libsemigroups_pybind11.BMat8.transpose"]], "congruence (class in _libsemigroups_pybind11)": [[5, "libsemigroups_pybind11.Congruence"]], "add_pair() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.add_pair"]], "class_index_to_word() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.class_index_to_word"]], "const_contains() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.const_contains"]], "contains() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.contains"]], "dead() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.dead"]], "finished() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.finished"]], "generating_pairs() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.generating_pairs"]], "has_knuth_bendix() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.has_knuth_bendix"]], "has_parent_froidure_pin() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.has_parent_froidure_pin"]], "has_quotient_froidure_pin() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.has_quotient_froidure_pin"]], "has_todd_coxeter() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.has_todd_coxeter"]], "is_quotient_obviously_finite() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.is_quotient_obviously_finite"]], "is_quotient_obviously_infinite() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.is_quotient_obviously_infinite"]], "kill() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.kill"]], "kind() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.kind"]], "knuth_bendix() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.knuth_bendix"]], "less() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.less"]], "non_trivial_classes() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.non_trivial_classes"]], "number_of_classes() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.number_of_classes"]], "number_of_generating_pairs() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.number_of_generating_pairs"]], "number_of_generators() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.number_of_generators"]], "number_of_non_trivial_classes() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.number_of_non_trivial_classes"]], "parent_froidure_pin() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.parent_froidure_pin"]], "quotient_froidure_pin() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.quotient_froidure_pin"]], "report() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.report"]], "report_every() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.report_every"]], "report_why_we_stopped() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.report_why_we_stopped"]], "run() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.run"]], "run_for() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.run_for"]], "run_until() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.run_until"]], "set_number_of_generators() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.set_number_of_generators"]], "stopped_by_predicate() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.stopped_by_predicate"]], "timed_out() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.timed_out"]], "todd_coxeter() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.todd_coxeter"]], "word_to_class_index() (congruence method)": [[5, "libsemigroups_pybind11.Congruence.word_to_class_index"]], "actiondigraph (class in _libsemigroups_pybind11)": [[6, "libsemigroups_pybind11.ActionDigraph"]], "actiondigraph.algorithm (class in _libsemigroups_pybind11)": [[6, "libsemigroups_pybind11.ActionDigraph.algorithm"]], "add_edge() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.add_edge"]], "add_nodes() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.add_nodes"]], "add_to_out_degree() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.add_to_out_degree"]], "edges_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.edges_iterator"]], "name (actiondigraph.algorithm property)": [[6, "libsemigroups_pybind11.ActionDigraph.algorithm.name"]], "neighbor() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.neighbor"]], "next_neighbor() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.next_neighbor"]], "nodes_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.nodes_iterator"]], "number_of_edges() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.number_of_edges"]], "number_of_nodes() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.number_of_nodes"]], "number_of_paths() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.number_of_paths"]], "number_of_paths_algorithm() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.number_of_paths_algorithm"]], "number_of_scc() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.number_of_scc"]], "out_degree() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.out_degree"]], "panilo_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.panilo_iterator"]], "panislo_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.panislo_iterator"]], "pilo_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.pilo_iterator"]], "pislo_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.pislo_iterator"]], "pstislo_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.pstislo_iterator"]], "random() (actiondigraph static method)": [[6, "libsemigroups_pybind11.ActionDigraph.random"]], "random_acyclic() (actiondigraph static method)": [[6, "libsemigroups_pybind11.ActionDigraph.random_acyclic"]], "reserve() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.reserve"]], "reverse_nodes_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.reverse_nodes_iterator"]], "reverse_spanning_forest() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.reverse_spanning_forest"]], "root_of_scc() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.root_of_scc"]], "scc_id() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.scc_id"]], "scc_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.scc_iterator"]], "scc_roots_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.scc_roots_iterator"]], "sccs_iterator() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.sccs_iterator"]], "spanning_forest() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.spanning_forest"]], "unsafe_neighbor() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.unsafe_neighbor"]], "unsafe_next_neighbor() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.unsafe_next_neighbor"]], "validate() (actiondigraph method)": [[6, "libsemigroups_pybind11.ActionDigraph.validate"]], "add_cycle() (in module libsemigroups_pybind11.action_digraph_helper)": [[7, "libsemigroups_pybind11.action_digraph_helper.add_cycle"]], "dot() (in module libsemigroups_pybind11.action_digraph_helper)": [[7, "libsemigroups_pybind11.action_digraph_helper.dot"]], "follow_path() (in module libsemigroups_pybind11.action_digraph_helper)": [[7, "libsemigroups_pybind11.action_digraph_helper.follow_path"]], "is_acyclic() (in module libsemigroups_pybind11.action_digraph_helper)": [[7, "libsemigroups_pybind11.action_digraph_helper.is_acyclic"]], "make() (in module libsemigroups_pybind11.action_digraph_helper)": [[7, "libsemigroups_pybind11.action_digraph_helper.make"]], "out_neighbors() (in module libsemigroups_pybind11.action_digraph_helper)": [[7, "libsemigroups_pybind11.action_digraph_helper.out_neighbors"]], "topological_sort() (in module libsemigroups_pybind11.action_digraph_helper)": [[7, "libsemigroups_pybind11.action_digraph_helper.topological_sort"]], "forest (class in _libsemigroups_pybind11)": [[8, "libsemigroups_pybind11.Forest"]], "add_nodes() (forest method)": [[8, "libsemigroups_pybind11.Forest.add_nodes"]], "clear() (forest method)": [[8, "libsemigroups_pybind11.Forest.clear"]], "label() (forest method)": [[8, "libsemigroups_pybind11.Forest.label"]], "number_of_nodes() (forest method)": [[8, "libsemigroups_pybind11.Forest.number_of_nodes"]], "parent() (forest method)": [[8, "libsemigroups_pybind11.Forest.parent"]], "parent_iterator() (forest method)": [[8, "libsemigroups_pybind11.Forest.parent_iterator"]], "set() (forest method)": [[8, "libsemigroups_pybind11.Forest.set"]], "fpsemigroup (class in _libsemigroups_pybind11)": [[9, "libsemigroups_pybind11.FpSemigroup"]], "add_rule() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.add_rule"]], "add_rules() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.add_rules"]], "alphabet() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.alphabet"]], "char_to_uint() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.char_to_uint"]], "dead() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.dead"]], "equal_to() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.equal_to"]], "finished() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.finished"]], "froidure_pin() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.froidure_pin"]], "has_froidure_pin() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.has_froidure_pin"]], "has_knuth_bendix() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.has_knuth_bendix"]], "has_todd_coxeter() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.has_todd_coxeter"]], "identity() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.identity"]], "inverses() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.inverses"]], "is_obviously_finite() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.is_obviously_finite"]], "is_obviously_infinite() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.is_obviously_infinite"]], "kill() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.kill"]], "knuth_bendix() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.knuth_bendix"]], "normal_form() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.normal_form"]], "number_of_rules() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.number_of_rules"]], "report() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.report"]], "report_every() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.report_every"]], "report_why_we_stopped() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.report_why_we_stopped"]], "rules() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.rules"]], "run() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.run"]], "run_for() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.run_for"]], "run_until() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.run_until"]], "running() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.running"]], "set_alphabet() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.set_alphabet"]], "set_identity() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.set_identity"]], "set_inverses() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.set_inverses"]], "size() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.size"]], "started() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.started"]], "stopped() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.stopped"]], "stopped_by_predicate() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.stopped_by_predicate"]], "string_to_word() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.string_to_word"]], "timed_out() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.timed_out"]], "to_gap_string() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.to_gap_string"]], "todd_coxeter() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.todd_coxeter"]], "uint_to_char() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.uint_to_char"]], "validate_letter() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.validate_letter"]], "validate_word() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.validate_word"]], "word_to_string() (fpsemigroup method)": [[9, "libsemigroups_pybind11.FpSemigroup.word_to_string"]], "alternating_group()": [[10, "alternating_group"]], "author (built-in class)": [[10, "author"]], "brauer_monoid()": [[10, "brauer_monoid"]], "built-in function": [[10, "alternating_group"], [10, "brauer_monoid"], [10, "chinese_monoid"], [10, "dual_symmetric_inverse_monoid"], [10, "fibonacci_semigroup"], [10, "full_transformation_monoid"], [10, "monogenic_semigroup"], [10, "orientation_preserving_monoid"], [10, "orientation_reversing_monoid"], [10, "partial_transformation_monoid"], [10, "partition_monoid"], [10, "plactic_monoid"], [10, "rectangular_band"], [10, "singular_brauer_monoid"], [10, "stellar_monoid"], [10, "stylic_monoid"], [10, "symmetric_group"], [10, "symmetric_inverse_monoid"], [10, "temperley_lieb_monoid"], [10, "uniform_block_bijection_monoid"], [59, "add_identity_rules"], [59, "add_inverse_rules"], [59, "add_rule"], [59, "add_rule_and_check"], [59, "add_rules"], [59, "add_zero_rules"], [59, "are_rules_sorted"], [59, "change_alphabet"], [59, "character"], [59, "first_unused_letter"], [59, "greedy_reduce_length"], [59, "length"], [59, "letter"], [59, "longest_common_subword"], [59, "longest_rule"], [59, "longest_rule_length"], [59, "make"], [59, "make_semigroup"], [59, "normalize_alphabet"], [59, "reduce_complements"], [59, "redundant_rule"], [59, "remove_duplicate_rules"], [59, "remove_redundant_generators"], [59, "remove_trivial_rules"], [59, "replace_subword"], [59, "replace_word"], [59, "reverse"], [59, "shortest_rule"], [59, "shortest_rule_length"], [59, "sort_each_rule"], [59, "sort_rules"]], "chinese_monoid()": [[10, "chinese_monoid"]], "dual_symmetric_inverse_monoid()": [[10, "dual_symmetric_inverse_monoid"]], "fibonacci_semigroup()": [[10, "fibonacci_semigroup"]], "full_transformation_monoid()": [[10, "full_transformation_monoid"]], "monogenic_semigroup()": [[10, "monogenic_semigroup"]], "orientation_preserving_monoid()": [[10, "orientation_preserving_monoid"]], "orientation_reversing_monoid()": [[10, "orientation_reversing_monoid"]], "partial_transformation_monoid()": [[10, "partial_transformation_monoid"]], "partition_monoid()": [[10, "partition_monoid"]], "plactic_monoid()": [[10, "plactic_monoid"]], "rectangular_band()": [[10, "rectangular_band"]], "singular_brauer_monoid()": [[10, "singular_brauer_monoid"]], "stellar_monoid()": [[10, "stellar_monoid"]], "stylic_monoid()": [[10, "stylic_monoid"]], "symmetric_group()": [[10, "symmetric_group"]], "symmetric_inverse_monoid()": [[10, "symmetric_inverse_monoid"]], "temperley_lieb_monoid()": [[10, "temperley_lieb_monoid"]], "uniform_block_bijection_monoid()": [[10, "uniform_block_bijection_monoid"]], "kambites (class in _libsemigroups_pybind11)": [[11, "libsemigroups_pybind11.Kambites"]], "add_rule() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.add_rule"]], "add_rules() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.add_rules"]], "alphabet() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.alphabet"]], "char_to_uint() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.char_to_uint"]], "dead() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.dead"]], "equal_to() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.equal_to"]], "finished() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.finished"]], "froidure_pin() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.froidure_pin"]], "has_froidure_pin() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.has_froidure_pin"]], "has_identity() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.has_identity"]], "identity() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.identity"]], "inverses() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.inverses"]], "is_obviously_finite() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.is_obviously_finite"]], "is_obviously_infinite() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.is_obviously_infinite"]], "kill() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.kill"]], "normal_form() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.normal_form"]], "number_of_normal_forms() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.number_of_normal_forms"]], "number_of_pieces() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.number_of_pieces"]], "number_of_rules() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.number_of_rules"]], "report() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.report"]], "report_every() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.report_every"]], "report_why_we_stopped() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.report_why_we_stopped"]], "rules() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.rules"]], "run() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.run"]], "run_for() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.run_for"]], "run_until() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.run_until"]], "running() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.running"]], "set_alphabet() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.set_alphabet"]], "set_identity() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.set_identity"]], "set_inverses() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.set_inverses"]], "size() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.size"]], "small_overlap_class() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.small_overlap_class"]], "started() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.started"]], "stopped() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.stopped"]], "stopped_by_predicate() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.stopped_by_predicate"]], "string_to_word() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.string_to_word"]], "timed_out() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.timed_out"]], "uint_to_char() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.uint_to_char"]], "validate_letter() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.validate_letter"]], "validate_word() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.validate_word"]], "word_to_string() (kambites method)": [[11, "libsemigroups_pybind11.Kambites.word_to_string"]], "knuthbendix (class in _libsemigroups_pybind11)": [[12, "libsemigroups_pybind11.KnuthBendix"]], "knuthbendix.overlap (class in _libsemigroups_pybind11)": [[12, "libsemigroups_pybind11.KnuthBendix.overlap"]], "active_rules() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.active_rules"]], "add_rule() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.add_rule"]], "add_rules() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.add_rules"]], "alphabet() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.alphabet"]], "char_to_uint() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.char_to_uint"]], "check_confluence_interval() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.check_confluence_interval"]], "confluent() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.confluent"]], "contains_empty_string() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.contains_empty_string"]], "dead() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.dead"]], "equal_to() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.equal_to"]], "finished() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.finished"]], "froidure_pin() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.froidure_pin"]], "gilman_digraph() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.gilman_digraph"]], "has_froidure_pin() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.has_froidure_pin"]], "identity() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.identity"]], "inverses() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.inverses"]], "is_obviously_finite() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.is_obviously_finite"]], "is_obviously_infinite() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.is_obviously_infinite"]], "kill() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.kill"]], "knuth_bendix_by_overlap_length() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.knuth_bendix_by_overlap_length"]], "max_overlap() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.max_overlap"]], "max_rules() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.max_rules"]], "name (knuthbendix.overlap property)": [[12, "libsemigroups_pybind11.KnuthBendix.overlap.name"]], "normal_form() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.normal_form"]], "normal_forms() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.normal_forms"]], "normal_forms_alphabet() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.normal_forms_alphabet"]], "number_of_active_rules() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.number_of_active_rules"]], "number_of_normal_forms() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.number_of_normal_forms"]], "number_of_rules() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.number_of_rules"]], "overlap_policy() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.overlap_policy"]], "report() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.report"]], "report_every() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.report_every"]], "report_why_we_stopped() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.report_why_we_stopped"]], "rewrite() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.rewrite"]], "rules() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.rules"]], "run() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.run"]], "run_for() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.run_for"]], "run_until() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.run_until"]], "running() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.running"]], "set_alphabet() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.set_alphabet"]], "set_identity() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.set_identity"]], "set_inverses() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.set_inverses"]], "size() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.size"]], "started() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.started"]], "stopped() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.stopped"]], "stopped_by_predicate() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.stopped_by_predicate"]], "string_to_word() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.string_to_word"]], "timed_out() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.timed_out"]], "to_gap_string() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.to_gap_string"]], "uint_to_char() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.uint_to_char"]], "validate_letter() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.validate_letter"]], "validate_word() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.validate_word"]], "word_to_string() (knuthbendix method)": [[12, "libsemigroups_pybind11.KnuthBendix.word_to_string"]], "boolean (matrixkind attribute)": [[13, "libsemigroups_pybind11.MatrixKind.Boolean"]], "integer (matrixkind attribute)": [[13, "libsemigroups_pybind11.MatrixKind.Integer"]], "matrix (class in libsemigroups_pybind11)": [[13, "libsemigroups_pybind11.Matrix"]], "matrixkind (class in libsemigroups_pybind11)": [[13, "libsemigroups_pybind11.MatrixKind"]], "maxplus (matrixkind attribute)": [[13, "libsemigroups_pybind11.MatrixKind.MaxPlus"]], "maxplustrunc (matrixkind attribute)": [[13, "libsemigroups_pybind11.MatrixKind.MaxPlusTrunc"]], "minplus (matrixkind attribute)": [[13, "libsemigroups_pybind11.MatrixKind.MinPlus"]], "minplustrunc (matrixkind attribute)": [[13, "libsemigroups_pybind11.MatrixKind.MinPlusTrunc"]], "ntp (matrixkind attribute)": [[13, "libsemigroups_pybind11.MatrixKind.NTP"]], "projmaxplus (matrixkind attribute)": [[13, "libsemigroups_pybind11.MatrixKind.ProjMaxPlus"]], "__eq__() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.__eq__"]], "__getitem__() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.__getitem__"]], "__iadd__() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.__iadd__"]], "__imul__() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.__imul__"]], "__init__() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.__init__"]], "__lt__() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.__lt__"]], "__mul__() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.__mul__"]], "make() (in module libsemigroups_pybind11)": [[13, "libsemigroups_pybind11.make"]], "make_identity() (in module libsemigroups_pybind11)": [[13, "libsemigroups_pybind11.make_identity"]], "number_of_cols() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.number_of_cols"]], "number_of_rows() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.number_of_rows"]], "one() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.one"]], "product_inplace() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.product_inplace"]], "row() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.row"]], "rows() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.rows"]], "swap() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.swap"]], "transpose() (matrix method)": [[13, "libsemigroups_pybind11.Matrix.transpose"]], "number_of_words() (in module _libsemigroups_pybind11)": [[14, "libsemigroups_pybind11.number_of_words"]], "pbr (class in _libsemigroups_pybind11)": [[15, "libsemigroups_pybind11.PBR"]], "__eq__() (pbr method)": [[15, "libsemigroups_pybind11.PBR.__eq__"]], "__getitem__() (pbr method)": [[15, "libsemigroups_pybind11.PBR.__getitem__"]], "__lt__() (pbr method)": [[15, "libsemigroups_pybind11.PBR.__lt__"]], "__mul__() (pbr method)": [[15, "libsemigroups_pybind11.PBR.__mul__"]], "degree() (pbr method)": [[15, "libsemigroups_pybind11.PBR.degree"]], "identity() (pbr method)": [[15, "libsemigroups_pybind11.PBR.identity"]], "make() (pbr static method)": [[15, "libsemigroups_pybind11.PBR.make"]], "make_identity() (pbr static method)": [[15, "libsemigroups_pybind11.PBR.make_identity"]], "product_inplace() (pbr method)": [[15, "libsemigroups_pybind11.PBR.product_inplace"]], "silo() (in module _libsemigroups_pybind11)": [[16, "libsemigroups_pybind11.silo"]], "sislo() (in module _libsemigroups_pybind11)": [[17, "libsemigroups_pybind11.sislo"]], "stephen (class in _libsemigroups_pybind11)": [[18, "libsemigroups_pybind11.Stephen"]], "accept_state() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.accept_state"]], "dead() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.dead"]], "finished() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.finished"]], "init() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.init"]], "kill() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.kill"]], "presentation() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.presentation"]], "report() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.report"]], "report_every() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.report_every"]], "report_why_we_stopped() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.report_why_we_stopped"]], "run() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.run"]], "run_for() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.run_for"]], "run_until() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.run_until"]], "running() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.running"]], "set_word() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.set_word"]], "started() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.started"]], "stopped() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.stopped"]], "stopped_by_predicate() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.stopped_by_predicate"]], "timed_out() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.timed_out"]], "word() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.word"]], "word_graph() (stephen method)": [[18, "libsemigroups_pybind11.Stephen.word_graph"]], "accepts() (in module _libsemigroups_pybind11)": [[19, "libsemigroups_pybind11.accepts"]], "is_left_factor() (in module _libsemigroups_pybind11)": [[19, "libsemigroups_pybind11.is_left_factor"]], "left_factors() (in module _libsemigroups_pybind11)": [[19, "libsemigroups_pybind11.left_factors"]], "number_of_left_factors() (in module _libsemigroups_pybind11)": [[19, "libsemigroups_pybind11.number_of_left_factors"]], "number_of_words_accepted() (in module _libsemigroups_pybind11)": [[19, "libsemigroups_pybind11.number_of_words_accepted"]], "words_accepted() (in module _libsemigroups_pybind11)": [[19, "libsemigroups_pybind11.words_accepted"]], "toddcoxeter (class in _libsemigroups_pybind11)": [[20, "libsemigroups_pybind11.ToddCoxeter"]], "toddcoxeter.froidure_pin_options (class in _libsemigroups_pybind11)": [[20, "libsemigroups_pybind11.ToddCoxeter.froidure_pin_options"]], "toddcoxeter.lookahead_options (class in _libsemigroups_pybind11)": [[20, "libsemigroups_pybind11.ToddCoxeter.lookahead_options"]], "toddcoxeter.order (class in _libsemigroups_pybind11)": [[20, "libsemigroups_pybind11.ToddCoxeter.order"]], "toddcoxeter.strategy_options (class in _libsemigroups_pybind11)": [[20, "libsemigroups_pybind11.ToddCoxeter.strategy_options"]], "add_pair() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.add_pair"]], "class_index_to_word() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.class_index_to_word"]], "compatible() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.compatible"]], "complete() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.complete"]], "const_contains() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.const_contains"]], "contains() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.contains"]], "dead() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.dead"]], "empty() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.empty"]], "finished() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.finished"]], "froidure_pin_policy() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.froidure_pin_policy"]], "generating_pairs() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.generating_pairs"]], "has_parent_froidure_pin() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.has_parent_froidure_pin"]], "has_quotient_froidure_pin() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.has_quotient_froidure_pin"]], "is_quotient_obviously_finite() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.is_quotient_obviously_finite"]], "is_quotient_obviously_infinite() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.is_quotient_obviously_infinite"]], "is_standardized() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.is_standardized"]], "kill() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.kill"]], "kind() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.kind"]], "less() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.less"]], "lookahead() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.lookahead"]], "lower_bound() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.lower_bound"]], "name (toddcoxeter.froidure_pin_options property)": [[20, "libsemigroups_pybind11.ToddCoxeter.froidure_pin_options.name"]], "name (toddcoxeter.lookahead_options property)": [[20, "libsemigroups_pybind11.ToddCoxeter.lookahead_options.name"]], "name (toddcoxeter.order property)": [[20, "libsemigroups_pybind11.ToddCoxeter.order.name"]], "name (toddcoxeter.strategy_options property)": [[20, "libsemigroups_pybind11.ToddCoxeter.strategy_options.name"]], "next_lookahead() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.next_lookahead"]], "non_trivial_classes() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.non_trivial_classes"]], "normal_forms() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.normal_forms"]], "number_of_classes() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.number_of_classes"]], "number_of_generating_pairs() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.number_of_generating_pairs"]], "number_of_generators() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.number_of_generators"]], "number_of_non_trivial_classes() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.number_of_non_trivial_classes"]], "parent_froidure_pin() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.parent_froidure_pin"]], "quotient_froidure_pin() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.quotient_froidure_pin"]], "random_interval() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.random_interval"]], "random_shuffle_generating_pairs() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.random_shuffle_generating_pairs"]], "report() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.report"]], "report_every() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.report_every"]], "report_why_we_stopped() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.report_why_we_stopped"]], "reserve() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.reserve"]], "run() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.run"]], "run_for() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.run_for"]], "run_until() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.run_until"]], "save() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.save"]], "set_number_of_generators() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.set_number_of_generators"]], "shrink_to_fit() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.shrink_to_fit"]], "sort_generating_pairs() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.sort_generating_pairs"]], "standardize() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.standardize"]], "stopped_by_predicate() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.stopped_by_predicate"]], "strategy() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.strategy"]], "timed_out() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.timed_out"]], "to_gap_string() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.to_gap_string"]], "word_to_class_index() (toddcoxeter method)": [[20, "libsemigroups_pybind11.ToddCoxeter.word_to_class_index"]], "wilo() (in module _libsemigroups_pybind11)": [[21, "libsemigroups_pybind11.wilo"]], "wislo() (in module _libsemigroups_pybind11)": [[22, "libsemigroups_pybind11.wislo"]], "congruence_kind (class in libsemigroups_pybind11)": [[26, "libsemigroups_pybind11.congruence_kind"]], "__iter__() (froidurepin method)": [[30, "FroidurePin.__iter__"]], "at() (froidurepin method)": [[30, "FroidurePin.at"]], "current_size() (froidurepin method)": [[30, "FroidurePin.current_size"]], "size() (froidurepin method)": [[30, "FroidurePin.size"]], "sorted() (froidurepin method)": [[30, "FroidurePin.sorted"]], "sorted_at() (froidurepin method)": [[30, "FroidurePin.sorted_at"]], "degree() (froidurepin method)": [[31, "FroidurePin.degree"]], "is_finite() (froidurepin method)": [[31, "FroidurePin.is_finite"]], "is_monoid() (froidurepin method)": [[31, "FroidurePin.is_monoid"]], "left_cayley_graph() (froidurepin method)": [[32, "FroidurePin.left_cayley_graph"]], "right_cayley_graph() (froidurepin method)": [[32, "FroidurePin.right_cayley_graph"]], "current_length() (froidurepin method)": [[33, "FroidurePin.current_length"]], "current_max_word_length() (froidurepin method)": [[33, "FroidurePin.current_max_word_length"]], "current_number_of_rules() (froidurepin method)": [[33, "FroidurePin.current_number_of_rules"]], "factorisation() (froidurepin method)": [[33, "FroidurePin.factorisation"]], "fast_product() (froidurepin method)": [[33, "FroidurePin.fast_product"]], "length() (froidurepin method)": [[33, "FroidurePin.length"]], "minimal_factorisation() (froidurepin method)": [[33, "FroidurePin.minimal_factorisation"]], "number_of_rules() (froidurepin method)": [[33, "FroidurePin.number_of_rules"]], "product_by_reduction() (froidurepin method)": [[33, "FroidurePin.product_by_reduction"]], "rules() (froidurepin method)": [[33, "FroidurePin.rules"]], "word_to_element() (froidurepin method)": [[33, "FroidurePin.word_to_element"]], "add_generator() (froidurepin method)": [[34, "FroidurePin.add_generator"]], "add_generators() (froidurepin method)": [[34, "FroidurePin.add_generators"]], "closure() (froidurepin method)": [[34, "FroidurePin.closure"]], "copy_add_generators() (froidurepin method)": [[34, "FroidurePin.copy_add_generators"]], "copy_closure() (froidurepin method)": [[34, "FroidurePin.copy_closure"]], "generator() (froidurepin method)": [[34, "FroidurePin.generator"]], "number_of_generators() (froidurepin method)": [[34, "FroidurePin.number_of_generators"]], "idempotents() (froidurepin method)": [[35, "FroidurePin.idempotents"]], "is_idempotent() (froidurepin method)": [[35, "FroidurePin.is_idempotent"]], "number_of_idempotents() (froidurepin method)": [[35, "FroidurePin.number_of_idempotents"]], "froidurepin (built-in class)": [[36, "FroidurePin"]], "__init__() (froidurepin method)": [[37, "FroidurePin.__init__"]], "contains() (froidurepin method)": [[38, "FroidurePin.contains"]], "current_position() (froidurepin method)": [[38, "FroidurePin.current_position"]], "equal_to() (froidurepin method)": [[38, "FroidurePin.equal_to"]], "position() (froidurepin method)": [[38, "FroidurePin.position"]], "position_to_sorted_position() (froidurepin method)": [[38, "FroidurePin.position_to_sorted_position"]], "sorted_position() (froidurepin method)": [[38, "FroidurePin.sorted_position"]], "final_letter() (froidurepin method)": [[39, "FroidurePin.final_letter"]], "first_letter() (froidurepin method)": [[39, "FroidurePin.first_letter"]], "prefix() (froidurepin method)": [[39, "FroidurePin.prefix"]], "suffix() (froidurepin method)": [[39, "FroidurePin.suffix"]], "dead() (froidurepin method)": [[40, "FroidurePin.dead"]], "enumerate() (froidurepin method)": [[40, "FroidurePin.enumerate"]], "finished() (froidurepin method)": [[40, "FroidurePin.finished"]], "kill() (froidurepin method)": [[40, "FroidurePin.kill"]], "report() (froidurepin method)": [[40, "FroidurePin.report"]], "report_every() (froidurepin method)": [[40, "FroidurePin.report_every"]], "report_why_we_stopped() (froidurepin method)": [[40, "FroidurePin.report_why_we_stopped"]], "run() (froidurepin method)": [[40, "FroidurePin.run"]], "run_for() (froidurepin method)": [[40, "FroidurePin.run_for"]], "run_until() (froidurepin method)": [[40, "FroidurePin.run_until"]], "running() (froidurepin method)": [[40, "FroidurePin.running"]], "started() (froidurepin method)": [[40, "FroidurePin.started"]], "stopped() (froidurepin method)": [[40, "FroidurePin.stopped"]], "stopped_by_predicate() (froidurepin method)": [[40, "FroidurePin.stopped_by_predicate"]], "timed_out() (froidurepin method)": [[40, "FroidurePin.timed_out"]], "batch_size() (froidurepin method)": [[41, "FroidurePin.batch_size"]], "concurrency_threshold() (froidurepin method)": [[41, "FroidurePin.concurrency_threshold"]], "immutable() (froidurepin method)": [[41, "FroidurePin.immutable"]], "max_threads() (froidurepin method)": [[41, "FroidurePin.max_threads"]], "reserve() (froidurepin method)": [[41, "FroidurePin.reserve"]], "current_size() (konieczny method)": [[45, "Konieczny.current_size"]], "degree() (konieczny method)": [[45, "Konieczny.degree"]], "size() (konieczny method)": [[45, "Konieczny.size"]], "konieczny.dclass (built-in class)": [[46, "Konieczny.DClass"]], "contains() (konieczny.dclass method)": [[47, "Konieczny.DClass.contains"]], "is_regular_d_class() (konieczny.dclass method)": [[47, "Konieczny.DClass.is_regular_D_class"]], "number_of_l_classes() (konieczny.dclass method)": [[47, "Konieczny.DClass.number_of_L_classes"]], "number_of_r_classes() (konieczny.dclass method)": [[47, "Konieczny.DClass.number_of_R_classes"]], "number_of_idempotents() (konieczny.dclass method)": [[47, "Konieczny.DClass.number_of_idempotents"]], "rep() (konieczny.dclass method)": [[47, "Konieczny.DClass.rep"]], "size() (konieczny.dclass method)": [[47, "Konieczny.DClass.size"]], "size_h_class() (konieczny.dclass method)": [[47, "Konieczny.DClass.size_H_class"]], "add_generator() (konieczny method)": [[48, "Konieczny.add_generator"]], "generator() (konieczny method)": [[48, "Konieczny.generator"]], "generators() (konieczny method)": [[48, "Konieczny.generators"]], "number_of_generators() (konieczny method)": [[48, "Konieczny.number_of_generators"]], "d_class_of_element() (konieczny method)": [[49, "Konieczny.D_class_of_element"]], "d_classes() (konieczny method)": [[49, "Konieczny.D_classes"]], "current_number_of_d_classes() (konieczny method)": [[49, "Konieczny.current_number_of_D_classes"]], "current_number_of_h_classes() (konieczny method)": [[49, "Konieczny.current_number_of_H_classes"]], "current_number_of_l_classes() (konieczny method)": [[49, "Konieczny.current_number_of_L_classes"]], "current_number_of_r_classes() (konieczny method)": [[49, "Konieczny.current_number_of_R_classes"]], "current_number_of_regular_d_classes() (konieczny method)": [[49, "Konieczny.current_number_of_regular_D_classes"]], "current_number_of_regular_l_classes() (konieczny method)": [[49, "Konieczny.current_number_of_regular_L_classes"]], "current_number_of_regular_r_classes() (konieczny method)": [[49, "Konieczny.current_number_of_regular_R_classes"]], "is_regular_element() (konieczny method)": [[49, "Konieczny.is_regular_element"]], "number_of_d_classes() (konieczny method)": [[49, "Konieczny.number_of_D_classes"]], "number_of_h_classes() (konieczny method)": [[49, "Konieczny.number_of_H_classes"]], "number_of_l_classes() (konieczny method)": [[49, "Konieczny.number_of_L_classes"]], "number_of_r_classes() (konieczny method)": [[49, "Konieczny.number_of_R_classes"]], "number_of_regular_d_classes() (konieczny method)": [[49, "Konieczny.number_of_regular_D_classes"]], "number_of_regular_l_classes() (konieczny method)": [[49, "Konieczny.number_of_regular_L_classes"]], "number_of_regular_r_classes() (konieczny method)": [[49, "Konieczny.number_of_regular_R_classes"]], "regular_d_classes() (konieczny method)": [[49, "Konieczny.regular_D_classes"]], "current_number_of_idempotents() (konieczny method)": [[50, "Konieczny.current_number_of_idempotents"]], "number_of_idempotents() (konieczny method)": [[50, "Konieczny.number_of_idempotents"]], "konieczny (built-in class)": [[51, "Konieczny"]], "__init__() (konieczny method)": [[52, "Konieczny.__init__"]], "__contains__() (konieczny method)": [[53, "Konieczny.__contains__"]], "contains() (konieczny method)": [[53, "Konieczny.contains"]], "dead() (konieczny method)": [[54, "Konieczny.dead"]], "finished() (konieczny method)": [[54, "Konieczny.finished"]], "kill() (konieczny method)": [[54, "Konieczny.kill"]], "report() (konieczny method)": [[54, "Konieczny.report"]], "report_every() (konieczny method)": [[54, "Konieczny.report_every"]], "report_why_we_stopped() (konieczny method)": [[54, "Konieczny.report_why_we_stopped"]], "run() (konieczny method)": [[54, "Konieczny.run"]], "run_for() (konieczny method)": [[54, "Konieczny.run_for"]], "run_until() (konieczny method)": [[54, "Konieczny.run_until"]], "running() (konieczny method)": [[54, "Konieczny.running"]], "started() (konieczny method)": [[54, "Konieczny.started"]], "stopped() (konieczny method)": [[54, "Konieczny.stopped"]], "stopped_by_predicate() (konieczny method)": [[54, "Konieczny.stopped_by_predicate"]], "timed_out() (konieczny method)": [[54, "Konieczny.timed_out"]], "presentation (built-in class)": [[58, "Presentation"]], "alphabet() (presentation method)": [[58, "Presentation.alphabet"]], "alphabet_from_rules() (presentation method)": [[58, "Presentation.alphabet_from_rules"]], "contains_empty_word() (presentation method)": [[58, "Presentation.contains_empty_word"]], "index() (presentation method)": [[58, "Presentation.index"]], "letter() (presentation method)": [[58, "Presentation.letter"]], "rules (presentation attribute)": [[58, "Presentation.rules"]], "validate() (presentation method)": [[58, "Presentation.validate"]], "validate_alphabet() (presentation method)": [[58, "Presentation.validate_alphabet"]], "validate_letter() (presentation method)": [[58, "Presentation.validate_letter"]], "validate_rules() (presentation method)": [[58, "Presentation.validate_rules"]], "add_identity_rules()": [[59, "add_identity_rules"]], "add_inverse_rules()": [[59, "add_inverse_rules"]], "add_rule()": [[59, "add_rule"]], "add_rule_and_check()": [[59, "add_rule_and_check"]], "add_rules()": [[59, "add_rules"]], "add_zero_rules()": [[59, "add_zero_rules"]], "are_rules_sorted()": [[59, "are_rules_sorted"]], "change_alphabet()": [[59, "change_alphabet"]], "character()": [[59, "character"]], "first_unused_letter()": [[59, "first_unused_letter"]], "greedy_reduce_length()": [[59, "greedy_reduce_length"]], "length()": [[59, "length"]], "letter()": [[59, "letter"]], "longest_common_subword()": [[59, "longest_common_subword"]], "longest_rule()": [[59, "longest_rule"]], "longest_rule_length()": [[59, "longest_rule_length"]], "make()": [[59, "make"]], "make_semigroup()": [[59, "make_semigroup"]], "normalize_alphabet()": [[59, "normalize_alphabet"]], "reduce_complements()": [[59, "reduce_complements"]], "redundant_rule()": [[59, "redundant_rule"]], "remove_duplicate_rules()": [[59, "remove_duplicate_rules"]], "remove_redundant_generators()": [[59, "remove_redundant_generators"]], "remove_trivial_rules()": [[59, "remove_trivial_rules"]], "replace_subword()": [[59, "replace_subword"]], "replace_word()": [[59, "replace_word"]], "reverse()": [[59, "reverse"]], "shortest_rule()": [[59, "shortest_rule"]], "shortest_rule_length()": [[59, "shortest_rule_length"]], "sort_each_rule()": [[59, "sort_each_rule"]], "sort_rules()": [[59, "sort_rules"]], "reportguard (class in _libsemigroups_pybind11)": [[60, "libsemigroups_pybind11.ReportGuard"]]}})